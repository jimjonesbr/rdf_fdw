\pset null NULL
CREATE SERVER dbpedia 
FOREIGN DATA WRAPPER rdf_fdw 
OPTIONS (endpoint 'https://dbpedia.org/sparql');
CREATE FOREIGN TABLE ftdbp (
  p text    OPTIONS (variable '?p', literal_format 'raw'),
  o text    OPTIONS (variable '?o', literal_format 'raw')
)
SERVER dbpedia OPTIONS (
  log_sparql 'true',
  sparql 'SELECT * WHERE { <http://dbpedia.org/resource/PostgreSQL> ?p ?o }');
SELECT rdf_fdw_arguments_compatible('"abc"','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"','"b"^^<xsd:string>');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"^^<xsd:string>','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"^^<xsd:string>','"b"^^<xsd:string>');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"@en','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"@en','"b"^^xsd:string');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"@en','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"@fr','"b"@ja');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"','"b"@ja');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT rdf_fdw_arguments_compatible('"abc"^^xsd:string','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

/* LEX */  
SELECT lex('"foo"');
 lex 
-----
 foo
(1 row)

SELECT lex('foo');
 lex 
-----
 foo
(1 row)

SELECT lex('"foo"@en');
 lex 
-----
 foo
(1 row)

SELECT lex('"foo"^^xsd:string');
 lex 
-----
 foo
(1 row)

SELECT lex(''); 
 lex 
-----
 
(1 row)

SELECT lex('""');
 lex 
-----
 
(1 row)

SELECT lex('"\""');
 lex 
-----
 \"
(1 row)

SELECT lex(NULL);
 lex  
------
 NULL
(1 row)

/* STRDT */
SELECT strdt(NULL, 'http://www.w3.org/2001/XMLSchema#string');
 strdt 
-------
 NULL
(1 row)

SELECT strdt('foo', NULL);
 strdt 
-------
 NULL
(1 row)

SELECT strdt('', '<http://example.org/type>');
             strdt             
-------------------------------
 ""^^<http://example.org/type>
(1 row)

SELECT strdt('foo', '');
ERROR:  datatype IRI cannot be empty
SELECT strdt('foo', ' ');
ERROR:  datatype IRI cannot contain whitespaces
SELECT strdt('foo', ' xsd:boolean ');
ERROR:  datatype IRI cannot contain whitespaces
SELECT strdt('foo', 'http://www.w3.org/2001/XMLSchema#string');
                      strdt                       
--------------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strdt('f"oo', 'http://example.org/type');
               strdt                
------------------------------------
 "f\"oo"^^<http://example.org/type>
(1 row)

SELECT strdt('"foo"@en', 'http://www.w3.org/2001/XMLSchema#int');
                     strdt                     
-----------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#int>
(1 row)

SELECT strdt('"f\"oo"^^xsd:string', 'http://example.org/newtype');
                 strdt                 
---------------------------------------
 "f\"oo"^^<http://example.org/newtype>
(1 row)

SELECT strdt('foo', '<http://example.org/type>');
              strdt               
----------------------------------
 "foo"^^<http://example.org/type>
(1 row)

SELECT strdt('foo', 'foo:bar');
      strdt       
------------------
 "foo"^^<foo:bar>
(1 row)

SELECT strdt('foo', 'xsd:string');
                      strdt                       
--------------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strdt('foo', '<nonsense>');
       strdt       
-------------------
 "foo"^^<nonsense>
(1 row)

SELECT p, o, strdt(o,'xsd:string')
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  strdt(o,'xsd:string') = strdt('PostgreSQL','xsd:string') AND
  langmatches(lang(o),'en');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "en"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>) = "PostgreSQL"^^<http://www.w3.org/2001/XMLSchema#string>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |                          strdt                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "PostgreSQL"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

/* STRLANG */
SELECT strlang('foo',NULL);
 strlang 
---------
 NULL
(1 row)

SELECT strlang(NULL,'de');
 strlang 
---------
 NULL
(1 row)

SELECT strlang('','es');
 strlang 
---------
 ""@es
(1 row)

SELECT strlang(' ','en');
 strlang 
---------
 " "@en
(1 row)

SELECT strlang('foo','pt');
 strlang  
----------
 "foo"@pt
(1 row)

SELECT strlang('"foo"@en','fr');
 strlang  
----------
 "foo"@fr
(1 row)

SELECT strlang('"foo"','it');
 strlang  
----------
 "foo"@it
(1 row)

SELECT strlang('"foo"^^xsd:string','pt');
 strlang  
----------
 "foo"@pt
(1 row)

SELECT strlang('"foo"^^<http://www.w3.org/2001/XMLSchema#string>','es');
 strlang  
----------
 "foo"@es
(1 row)

SELECT strlang(strlang('"foo"^^<http://www.w3.org/2001/XMLSchema#string>','es'),'de');
 strlang  
----------
 "foo"@de
(1 row)

SELECT strlang(strlang('f"o"o','en'),'de');
   strlang    
--------------
 "f\"o\"o"@de
(1 row)

SELECT strlang(strlang('x\"y','pl'),'it');
  strlang  
-----------
 "x\"y"@it
(1 row)

SELECT strlang('foo', 'xyz');
  strlang  
-----------
 "foo"@xyz
(1 row)

SELECT p, o, strlang(o,'fr')
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'de') AND
  lang(strlang(o,'fr')) = 'fr';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LANG(STRLANG(?o, "fr")) = "fr")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |     strlang     
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "PostgreSQL"@fr
(1 row)

/* STR */
SELECT str('foo');
  str  
-------
 "foo"
(1 row)

SELECT str('"foo"');
  str  
-------
 "foo"
(1 row)

SELECT str('"foo"@en');
  str  
-------
 "foo"
(1 row)

SELECT str('"foo"^^xsd:string');
  str  
-------
 "foo"
(1 row)

SELECT str('f"oo');
   str   
---------
 "f\"oo"
(1 row)

SELECT str('"f\"oo"');
   str   
---------
 "f\"oo"
(1 row)

SELECT str('<http://example.org/foo>');
           str            
--------------------------
 "http://example.org/foo"
(1 row)

SELECT str('');
 str 
-----
 ""
(1 row)

SELECT str(' ');
 str 
-----
 " "
(1 row)

SELECT str(NULL);
 str  
------
 NULL
(1 row)

SELECT p, o, str(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'es') AND
  str(o) = str('PostgreSQL') AND str(o) = '"PostgreSQL"';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STR(?o) = "PostgreSQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |     str      
----------------------------------------------+-----------------+--------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "PostgreSQL"
(1 row)

/* LANG */
SELECT lang('"foo"@en');
 lang 
------
 en
(1 row)

SELECT lang(strlang('foo','fr'));
 lang 
------
 fr
(1 row)

SELECT lang(strdt('foo','xsd:string'));
 lang 
------
 
(1 row)

SELECT lang('"f"oo"@it');
 lang 
------
 it
(1 row)

SELECT lang('');
 lang 
------
 
(1 row)

SELECT lang(' ');
 lang 
------
 
(1 row)

SELECT lang(NULL);
 lang 
------
 NULL
(1 row)

SELECT lang('<http://example.org>'); 
 lang 
------
 
(1 row)

SELECT p, o, lang(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  lang(o) = 'es';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LANG(?o) = "es")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | lang 
----------------------------------------------+-----------------+------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | es
(1 row)

/* DATATYPE */
SELECT datatype('"foo"^^xsd:string');
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT datatype('"foo"^^<http://www.w3.org/2001/XMLSchema#string>');
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT datatype(strdt('foo','xsd:string'));
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT datatype('"42"^^<xsd:int>');
                datatype                
----------------------------------------
 <http://www.w3.org/2001/XMLSchema#int>
(1 row)

SELECT datatype(strdt('foo','bar:xyz'));
 datatype  
-----------
 <bar:xyz>
(1 row)

SELECT datatype('"foo"@es');
 datatype 
----------
 
(1 row)

SELECT datatype('');
 datatype 
----------
 
(1 row)

SELECT datatype(' ');
 datatype 
----------
 
(1 row)

SELECT datatype('"foo"^<xsd:string>');
 datatype 
----------
 
(1 row)

SELECT datatype('"foo"^^xsd:string>');
 datatype 
----------
 
(1 row)

SELECT datatype('"foo"^^<xsd:string');
 datatype 
----------
 
(1 row)

SELECT datatype(NULL);
 datatype 
----------
 NULL
(1 row)

SELECT p, o, datatype(o)
FROM ftdbp 
WHERE 
  datatype(o) = iri('http://www.w3.org/2001/XMLSchema#nonNegativeInteger') AND
  datatype(o) = iri('"http://www.w3.org/2001/XMLSchema#nonNegativeInteger"') AND
  datatype(o) = '<http://www.w3.org/2001/XMLSchema#nonNegativeInteger>';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(DATATYPE(?o) = <http://www.w3.org/2001/XMLSchema#nonNegativeInteger>)
}

INFO:  SPARQL returned 1 record.

                      p                       |                               o                                |                       datatype                        
----------------------------------------------+----------------------------------------------------------------+-------------------------------------------------------
 <http://dbpedia.org/ontology/wikiPageLength> | "91177"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger> | <http://www.w3.org/2001/XMLSchema#nonNegativeInteger>
(1 row)

/* ENCODES_FOR_URI */
SELECT encode_for_uri('"Los Angeles"');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT encode_for_uri('"Los Angeles"@en');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT encode_for_uri('"Los Angeles"^^xsd:string');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT encode_for_uri('"Los Angeles"^^<xsd:string>');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT encode_for_uri('"Los Angeles"^^<http://www.w3.org/2001/XMLSchema#string>');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT encode_for_uri('foo! *''();:@&=+$,/?#[]');
                         encode_for_uri                         
----------------------------------------------------------------
 "foo%21%20%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D"
(1 row)

SELECT encode_for_uri('foo');
 encode_for_uri 
----------------
 "foo"
(1 row)

SELECT encode_for_uri('');
 encode_for_uri 
----------------
 ""
(1 row)

SELECT encode_for_uri(NULL);
 encode_for_uri 
----------------
 NULL
(1 row)

SELECT p, o, encode_for_uri(o)
FROM ftdbp
WHERE 
  p = iri('http://dbpedia.org/property/developer') AND
  encode_for_uri(o) = encode_for_uri('PostgreSQL Global Development Group') AND
  encode_for_uri(o) = encode_for_uri(strlang('PostgreSQL Global Development Group','de'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/developer>)
 FILTER(ENCODE_FOR_URI(?o) = "PostgreSQL%20Global%20Development%20Group")
}

INFO:  SPARQL returned 1 record.

                    p                    |                    o                     |               encode_for_uri                
-----------------------------------------+------------------------------------------+---------------------------------------------
 <http://dbpedia.org/property/developer> | "PostgreSQL Global Development Group"@en | "PostgreSQL%20Global%20Development%20Group"
(1 row)

/* IRI / URI */
SELECT iri('"http://example/"'), iri('http://example/'), iri('<http://example/>');
        iri        |        iri        |        iri        
-------------------+-------------------+-------------------
 <http://example/> | <http://example/> | <http://example/>
(1 row)

SELECT iri('"mailto:foo@example.com"'), iri('mailto:foo@example.com'), iri('<mailto:foo@example.com>');
           iri            |           iri            |           iri            
--------------------------+--------------------------+--------------------------
 <mailto:foo@example.com> | <mailto:foo@example.com> | <mailto:foo@example.com>
(1 row)

SELECT iri('"urn:uuid:123e4567-e89b-12d3-a456-426614174000"'), iri('urn:uuid:123e4567-e89b-12d3-a456-426614174000'), iri('<urn:uuid:123e4567-e89b-12d3-a456-426614174000>');
                       iri                       |                       iri                       |                       iri                       
-------------------------------------------------+-------------------------------------------------+-------------------------------------------------
 <urn:uuid:123e4567-e89b-12d3-a456-426614174000> | <urn:uuid:123e4567-e89b-12d3-a456-426614174000> | <urn:uuid:123e4567-e89b-12d3-a456-426614174000>
(1 row)

SELECT iri('"file://etc/passwd"'), iri('file://etc/passwd'), iri('<file://etc/passwd>');
         iri         |         iri         |         iri         
---------------------+---------------------+---------------------
 <file://etc/passwd> | <file://etc/passwd> | <file://etc/passwd>
(1 row)

SELECT iri('"foo:bar"'), iri('foo:bar'), iri('<foo:bar>');
    iri    |    iri    |    iri    
-----------+-----------+-----------
 <foo:bar> | <foo:bar> | <foo:bar>
(1 row)

SELECT iri('"foo"'), iri('foo'), iri('<foo>');
  iri  |  iri  |   iri   
-------+-------+---------
 <foo> | <foo> | <<foo>>
(1 row)

SELECT iri('"a:b:c"'), iri('a:b:c'), iri('<a:b:c>');
   iri   |   iri   |   iri   
---------+---------+---------
 <a:b:c> | <a:b:c> | <a:b:c>
(1 row)

SELECT iri('"http:/not-a-scheme"'), iri('http:/not-a-scheme'), iri('<http:/not-a-scheme>');
         iri          |         iri          |         iri          
----------------------+----------------------+----------------------
 <http:/not-a-scheme> | <http:/not-a-scheme> | <http:/not-a-scheme>
(1 row)

SELECT iri('"foo"@en');
  iri  
-------
 <foo>
(1 row)

SELECT iri('"42"^^<http://www.w3.org/2001/XMLSchema#int>');
 iri  
------
 <42>
(1 row)

SELECT p, o, iri(p) FROM ftdbp 
WHERE 
  iri(p) = iri('http://dbpedia.org/property/released') AND
  iri(p) = iri('"http://dbpedia.org/property/released"') AND
  iri(p) = iri('"http://dbpedia.org/property/released"@en') AND
  iri(p) = iri('"http://dbpedia.org/property/released"^^xsd:string');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(IRI(?p) = <http://dbpedia.org/property/released>)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           |                  iri                   
----------------------------------------+-------------------------------------------------------+----------------------------------------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | <http://dbpedia.org/property/released>
(1 row)

/* isIRI / isURI */
SELECT isIRI('<https://example/>'); 
 isiri 
-------
 t
(1 row)

SELECT isIRI('<mailto:foo@example.com>');
 isiri 
-------
 t
(1 row)

SELECT isIRI('http://example/');
 isiri 
-------
 f
(1 row)

SELECT isIRI('"http://example/"');
 isiri 
-------
 f
(1 row)

SELECT isIRI('path');
 isiri 
-------
 f
(1 row)

SELECT isIRI('"path"');
 isiri 
-------
 f
(1 row)

SELECT isIRI('"foo"^^xsd:string');
 isiri 
-------
 f
(1 row)

SELECT isIRI('"foo"^^<http://www.w3.org/2001/XMLSchema#string>'); 
 isiri 
-------
 f
(1 row)

SELECT isIRI(strdt('foo', 'xsd:string'));
 isiri 
-------
 f
(1 row)

SELECT isIRI('"foo"@en');
 isiri 
-------
 f
(1 row)

SELECT isIRI('');
 isiri 
-------
 f
(1 row)

SELECT isIRI(NULL);
 isiri 
-------
 NULL
(1 row)

SELECT isIRI('<not-an-iri');
 isiri 
-------
 f
(1 row)

SELECT isURI('<http://example/>');
 isuri 
-------
 t
(1 row)

SELECT isURI('path');
 isuri 
-------
 f
(1 row)

SELECT p, o, isiri(p) FROM ftdbp 
WHERE 
  iri(p) = iri('http://dbpedia.org/property/released') AND
  isiri(p);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(isIRI(?p))
 FILTER(IRI(?p) = <http://dbpedia.org/property/released>)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | isiri 
----------------------------------------+-------------------------------------------------------+-------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | t
(1 row)

/* STRSTARTS */
SELECT strstarts('"foobar"','"foo"'), strstarts('foobar','foo');
 strstarts | strstarts 
-----------+-----------
 t         | t
(1 row)

SELECT strstarts('"foobar"@en','"foo"@en');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('"foobar"^^<xsd:string>','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('"foobar"^^<xsd:string>','"foo"');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('"foobar"','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('"foobar"@en','"foo"');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('"foobar"@en','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('foobar','');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('','xyz');
 strstarts 
-----------
 f
(1 row)

SELECT strstarts('foobar',NULL);
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts(NULL,'xyz');
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts(NULL, NULL);
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts(strlang('foobar','en'),'"foo"@fr');
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts(strlang('foobar','en'), strlang('foo','fr'));
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts(strlang('foobar','en'), '"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts(strlang('foobar','en'), strdt('foo','xsd:string'));
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('foobar', strdt('foo','xsd:string'));
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('foobar','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT strstarts('foobar', strlang('foo','it'));
 strstarts 
-----------
 NULL
(1 row)

SELECT strstarts('foobar','"foo"@de');
 strstarts 
-----------
 NULL
(1 row)

SELECT p, o, strstarts(o,str('Postgre'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'pt') AND
  strstarts(o,'Postgre') AND
  strstarts(o, '"Postgre"') AND
  strstarts(o,'"Postgre"^^xsd:string') AND
  strstarts(o, strdt('Postgre','xsd:string')) AND
  strstarts(o, '"Postgre"@pt') AND
  strstarts(o, strlang('Postgre','pt'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(STRSTARTS(?o, "Postgre"))
 FILTER(STRSTARTS(?o, "Postgre"))
 FILTER(STRSTARTS(?o, "Postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRSTARTS(?o, "Postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRSTARTS(?o, "Postgre"@pt))
 FILTER(STRSTARTS(?o, "Postgre"@pt))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strstarts 
----------------------------------------------+-----------------+-----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | t
(1 row)

/* STRENDS */
SELECT strends('"foobar"','"bar"'), strends('foobar','bar');
 strends | strends 
---------+---------
 t       | t
(1 row)

SELECT strends('"foobar"@en','"bar"@en');
 strends 
---------
 t
(1 row)

SELECT strends('"foobar"^^xsd:string', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT strends('"foobar"^^xsd:string', '"bar"');
 strends 
---------
 t
(1 row)

SELECT strends('"foobar"', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT strends('"foobar"@en', '"bar"');
 strends 
---------
 t
(1 row)

SELECT strends('"foobar"@en', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT strends('foobar','xyz');
 strends 
---------
 f
(1 row)

SELECT strends('foobar','');
 strends 
---------
 t
(1 row)

SELECT strends('','xyz');
 strends 
---------
 f
(1 row)

SELECT strends('foobar',NULL);
 strends 
---------
 NULL
(1 row)

SELECT strends(NULL,'xyz');
 strends 
---------
 NULL
(1 row)

SELECT strends(NULL, NULL);
 strends 
---------
 NULL
(1 row)

SELECT strends('"foobar"@en','"bar"@fr');
 strends 
---------
 NULL
(1 row)

SELECT strends(strlang('foobar','en'),'"bar"@fr');
 strends 
---------
 NULL
(1 row)

SELECT strends(strlang('foobar','en'), '"bar"^^<xsd:string>');
 strends 
---------
 t
(1 row)

SELECT strends(strlang('foobar','en'), strdt('bar','xsd:string'));
 strends 
---------
 t
(1 row)

SELECT strends('foobar', strdt('bar','xsd:string'));
 strends 
---------
 t
(1 row)

SELECT strends('foobar','"bar"^^<xsd:string>');
 strends 
---------
 t
(1 row)

SELECT strends('foobar','"bar"@de');
 strends 
---------
 NULL
(1 row)

SELECT p, o, strends(o,str('SQL'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'es') AND
  strends(o,'SQL') AND
  strends(o, '"SQL"') AND
  strends(o,'"SQL"^^xsd:string') AND
  strends(o, strdt('SQL','xsd:string'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(STRENDS(?o, "SQL"))
 FILTER(STRENDS(?o, "SQL"))
 FILTER(STRENDS(?o, "SQL"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRENDS(?o, "SQL"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strends 
----------------------------------------------+-----------------+---------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | t
(1 row)

/* STRBEFORE */
SELECT strbefore('abc','b'), strbefore('"abc"','"b"');
 strbefore | strbefore 
-----------+-----------
 "a"       | "a"
(1 row)

SELECT strbefore('"abc"@en','bc');
 strbefore 
-----------
 "a"@en
(1 row)

SELECT strbefore('"abc"@en','"b"@cy');
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore('"abc"^^xsd:string',''), strbefore('"abc"^^xsd:string','""');
                   strbefore                   |                   strbefore                   
-----------------------------------------------+-----------------------------------------------
 ""^^<http://www.w3.org/2001/XMLSchema#string> | ""^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('abc','xyz'), strbefore('"abc"','"xyz"');
 strbefore | strbefore 
-----------+-----------
 ""        | ""
(1 row)

SELECT strbefore('"abc"@en', '"z"@en');
 strbefore 
-----------
 ""
(1 row)

SELECT strbefore('"abc"@en', '"z"'), strbefore('"abc"@en', 'z');
 strbefore | strbefore 
-----------+-----------
 ""        | ""
(1 row)

SELECT strbefore('"abc"@en', '""@en');
 strbefore 
-----------
 ""@en
(1 row)

SELECT strbefore('"abc"@en', '""');
 strbefore 
-----------
 ""@en
(1 row)

SELECT strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','c');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"c"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"c"^^xsd:string');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('"abc"^^http://www.w3.org/2001/XMLSchema#string','"c"^^<xsd:string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('"abc"^^xsd:string','"c"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strbefore('"abc"@fr','"b"^^xsd:string');
 strbefore 
-----------
 "a"@fr
(1 row)

SELECT strbefore('"abc"^^<xsd:string>','"b"@de');
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore('"abc"@en','"b"^^<foo:bar>');
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore('abc', NULL);
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore(NULL, 'xyz');
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore(NULL, NULL);
 strbefore 
-----------
 NULL
(1 row)

SELECT strbefore('abc', '');
 strbefore 
-----------
 ""
(1 row)

SELECT strbefore('"abc"', '');
 strbefore 
-----------
 ""
(1 row)

SELECT strbefore('', 'xyz');
 strbefore 
-----------
 ""
(1 row)

SELECT strbefore('', '');
 strbefore 
-----------
 ""
(1 row)

SELECT strbefore('""','""');
 strbefore 
-----------
 ""
(1 row)

SELECT p, o, strbefore(o, strlang('SQL','fr')), strbefore(o, strdt('SQL','xsd:string'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  strbefore(o, '"SQL"@fr') = '"Postgre"@fr' AND
  strbefore(o, '"SQL"@fr') = strlang('Postgre','fr') AND
  strbefore(str(o), 'SQL') = str('Postgre');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRBEFORE(?o, "SQL"@fr) = "Postgre"@fr)
 FILTER(STRBEFORE(STR(?o), "SQL") = "Postgre")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |  strbefore   |  strbefore   
----------------------------------------------+-----------------+--------------+--------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "Postgre"@fr | "Postgre"@fr
(1 row)

/* STRAFTER */
SELECT strafter('"abc"','"b"');
 strafter 
----------
 "c"
(1 row)

SELECT strafter('"abc"@en','ab');
 strafter 
----------
 "c"@en
(1 row)

SELECT strafter('"abc"@en','"b"@cy');
 strafter 
----------
 NULL
(1 row)

SELECT strafter('"abc"^^xsd:string','""');
                     strafter                     
--------------------------------------------------
 "abc"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','b');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"b"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"b"^^xsd:string');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"^^http://www.w3.org/2001/XMLSchema#string','"b"^^<xsd:string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"^^xsd:string','"b"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT strafter('"abc"@fr','"b"^^xsd:string');
 strafter 
----------
 "c"@fr
(1 row)

SELECT strafter('"abc"','"xyz"');
 strafter 
----------
 ""
(1 row)

SELECT strafter('"abc"@en', '"z"@en');
 strafter 
----------
 ""
(1 row)

SELECT strafter('"abc"@en', '"z"');
 strafter 
----------
 ""
(1 row)

SELECT strafter('"abc"@en', '""@en');
 strafter 
----------
 "abc"@en
(1 row)

SELECT strafter('"abc"@en', '""');
 strafter 
----------
 "abc"@en
(1 row)

SELECT strafter('abc','b');
 strafter 
----------
 "c"
(1 row)

SELECT strafter('abc','xyz');
 strafter 
----------
 ""
(1 row)

SELECT strafter('abc', NULL);
 strafter 
----------
 NULL
(1 row)

SELECT strafter(NULL, 'xyz');
 strafter 
----------
 NULL
(1 row)

SELECT strafter(NULL, NULL);
 strafter 
----------
 NULL
(1 row)

SELECT strafter('abc', '');
 strafter 
----------
 "abc"
(1 row)

SELECT strafter('', 'xyz');
 strafter 
----------
 ""
(1 row)

SELECT strafter('', '');
 strafter 
----------
 ""
(1 row)

SELECT p, o, strafter(o, strlang('Postgre','fr')), strafter(o, strdt('Postgre','xsd:string'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'fr') AND
  strafter(o, '"Postgre"@fr') = '"SQL"@fr' AND
  strafter(o, '"Postgre"@fr') = strlang('SQL','fr');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "fr"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRAFTER(?o, "Postgre"@fr) = "SQL"@fr)
}

INFO:  SPARQL returned 0 records.

 p | o | strafter | strafter 
---+---+----------+----------
(0 rows)

/* CONTAINS */
SELECT contains('"foobar"', '"bar"'), contains('foobar', 'bar');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"@en', '"foo"@en'), contains(strlang('"foobar"','en'), strlang('foo','en'));
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"^^xsd:string', '"bar"^^xsd:string'), contains(strdt('"foobar"','xsd:string'), strdt('"bar"','xsd:string'));
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"^^xsd:string', '"foo"'), contains('"foobar"^^xsd:string', 'foo');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"', '"bar"^^xsd:string'), contains('foobar', '"bar"^^xsd:string');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"@en', '"foo"'), contains('"foobar"@en', 'foo');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT contains('"foobar"@en', '"bar"^^xsd:string');
 contains 
----------
 t
(1 row)

SELECT contains('"foobar"', '""'), contains('foobar', '');
 contains | contains 
----------+----------
 t        | f
(1 row)

SELECT contains('""', '"foo"'), contains('', 'foo');
 contains | contains 
----------+----------
 f        | f
(1 row)

SELECT contains('"foobar"', NULL), contains('foobar', NULL);
 contains | contains 
----------+----------
 NULL     | NULL
(1 row)

SELECT contains(NULL, '"foo"'), contains(NULL, 'foo');
 contains | contains 
----------+----------
 NULL     | NULL
(1 row)

SELECT contains(NULL, NULL);
 contains 
----------
 NULL
(1 row)

SELECT contains('"foobar"@en', '"foo"@fr');
 contains 
----------
 t
(1 row)

SELECT contains('"123"^^<http://example.com/int>', '"2"');
 contains 
----------
 t
(1 row)

SELECT contains('"abc"', '"def"@en');
 contains 
----------
 f
(1 row)

SELECT p, o, contains(o,'"ostg"@fr'), contains(o,'"ostg"^^xsd:string')
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'fr') AND
  contains(o,'ostg') AND
  contains(o,'"ostg"@fr') AND
  contains(o, strlang('ostg','fr')) AND
  contains(o, strdt('ostg','xsd:string'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "fr"))
 FILTER(CONTAINS(?o, "ostg"))
 FILTER(CONTAINS(?o, "ostg"@fr))
 FILTER(CONTAINS(?o, "ostg"@fr))
 FILTER(CONTAINS(?o, "ostg"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | contains | contains 
----------------------------------------------+-----------------+----------+----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | t        | t
(1 row)

/* LANGMATCHES */
SELECT langmatches(lang('"hello"@en'), '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@EN-US'), '"en-us"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@fr'), '"FR"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@fr-ca'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en-us'), '"en-*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en'), '"en-*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@fr-ca'), '"fr-*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@fr'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches(lang('"hello"@en-us'), '"fr-*"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches(lang('"hello"@en'), '"en-us-*"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches(lang('"hello"'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches(lang('"hello"'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('""@en'), '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('""'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"^^xsd:string'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches(lang('"hello"^^xsd:string'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en'), '"en"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en'), '"*"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en-us'), '"EN-*"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches('', '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches('en', '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT langmatches(lang('"hello"@en'), '');
 langmatches 
-------------
 f
(1 row)

SELECT langmatches('', '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT p, o, langmatches(lang(o),'*')
FROM ftdbp 
WHERE langmatches(lang(o),'pt');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
}

INFO:  SPARQL returned 3 records.

                       p                        |                                                                o                                                                 | langmatches 
------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+-------------
 <http://www.w3.org/2000/01/rdf-schema#label>   | "PostgreSQL"@pt                                                                                                                  | t
 <http://www.w3.org/2000/01/rdf-schema#comment> | "PostgreSQL é um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de código aberto."@pt | t
 <http://dbpedia.org/ontology/abstract>         | "PostgreSQL é um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de código aberto."@pt | t
(3 rows)

/* ISBLANK */
SELECT isblank('_:b1');
 isblank 
---------
 t
(1 row)

SELECT isblank('_:node123');
 isblank 
---------
 t
(1 row)

SELECT isblank('<http://example.org/a>');
 isblank 
---------
 f
(1 row)

SELECT isblank('"hello"');
 isblank 
---------
 f
(1 row)

SELECT isblank('"hello"@en');
 isblank 
---------
 f
(1 row)

SELECT isblank('"42"^^xsd:integer');
 isblank 
---------
 f
(1 row)

SELECT isblank('_notblank');
 isblank 
---------
 f
(1 row)

SELECT isblank('');
 isblank 
---------
 f
(1 row)

SELECT isblank('b1');
 isblank 
---------
 f
(1 row)

SELECT isblank('_:');
 isblank 
---------
 t
(1 row)

SELECT isblank('_');
 isblank 
---------
 f
(1 row)

SELECT isblank(' ');
 isblank 
---------
 f
(1 row)

SELECT isblank('');
 isblank 
---------
 f
(1 row)

SELECT isblank(NULL);
 isblank 
---------
 NULL
(1 row)

SELECT p, o, isblank(o)
FROM ftdbp 
WHERE isblank(o);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISBLANK(?o))
}

INFO:  SPARQL returned 0 records.

 p | o | isblank 
---+---+---------
(0 rows)

/* ISNUMERIC */
SELECT isnumeric('12');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric('"12"^^xsd:nonNegativeInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"1200"^^xsd:byte');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric('<http://example/>');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric('"12"^^xsd:integer');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:positiveInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:negativeInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:nonPositiveInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:long');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:int');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:short');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:unsignedLong');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:unsignedInt');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:unsignedShort');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:unsignedByte');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:double');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:float');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('"12"^^xsd:decimal');
 isnumeric 
-----------
 t
(1 row)

SELECT isnumeric('');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric(' ');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric('""');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric('" "');
 isnumeric 
-----------
 f
(1 row)

SELECT isnumeric(NULL);
 isnumeric 
-----------
 NULL
(1 row)

SELECT p, o, isnumeric(o), isnumeric(p)
FROM ftdbp
WHERE 
  p = iri('http://dbpedia.org/ontology/wikiPageLength') AND
  isnumeric(o);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISNUMERIC(?o))
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageLength>)
}

INFO:  SPARQL returned 1 record.

                      p                       |                               o                                | isnumeric | isnumeric 
----------------------------------------------+----------------------------------------------------------------+-----------+-----------
 <http://dbpedia.org/ontology/wikiPageLength> | "91177"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger> | t         | f
(1 row)

/* ISLITERAL */
SELECT isliteral('"hello"');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"123"');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"12"^^xsd:integer');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"12"^^xsd:nonNegativeInteger');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"12.34"^^xsd:double');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"true"^^xsd:boolean');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"abc"^^<http://example.org/custom>'); -- true
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"hello"@en');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('"bonjour"@fr');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('12');
 isliteral 
-----------
 f
(1 row)

SELECT isliteral('<http://example.org>');
 isliteral 
-----------
 f
(1 row)

SELECT isliteral('_:bnode');
 isliteral 
-----------
 f
(1 row)

SELECT isliteral('');
 isliteral 
-----------
 f
(1 row)

SELECT isliteral('" "');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral('""');
 isliteral 
-----------
 t
(1 row)

SELECT isliteral(NULL);
 isliteral 
-----------
 NULL
(1 row)

SELECT p, o, isliteral(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  isliteral(o) AND 
  NOT isliteral(p);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISLITERAL(?o))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 21 records.

                      p                       |           o            | isliteral 
----------------------------------------------+------------------------+-----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "بوستجري إس كيو إل"@ar | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh        | t
(21 rows)

/* BNODE */
SELECT isblank(bnode());
 isblank 
---------
 t
(1 row)

SELECT bnode('xyz');
 bnode 
-------
 _:xyz
(1 row)

SELECT bnode('xyz');
 bnode 
-------
 _:xyz
(1 row)

SELECT bnode('"xyz"');
 bnode 
-------
 _:xyz
(1 row)

SELECT bnode('"xyz"@en');
 bnode 
-------
 _:xyz
(1 row)

SELECT bnode('"xyz"^^xsd:string');
 bnode 
-------
 _:xyz
(1 row)

SELECT bnode('hello world');
     bnode     
---------------
 _:hello_world
(1 row)

SELECT bnode('123!');
 bnode  
--------
 _:123_
(1 row)

SELECT bnode('<http://example.org>');
 bnode 
-------
 NULL
(1 row)

SELECT bnode('_:bnode');
 bnode 
-------
 NULL
(1 row)

SELECT bnode('');
 bnode 
-------
 NULL
(1 row)

SELECT bnode(NULL);
 bnode 
-------
 NULL
(1 row)

SELECT *
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  isblank(bnode(o));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISBLANK(BNODE(?o)))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 21 records.

                      p                       |           o            
----------------------------------------------+------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en
 <http://www.w3.org/2000/01/rdf-schema#label> | "بوستجري إس كيو إل"@ar
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh
(21 rows)

/* UUID (not pushable) */
SELECT uuid() ~ '^<urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}>$';
 ?column? 
----------
 t
(1 row)

/* STRUUID() (not pushable) */
SELECT struuid() ~ '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$' AS struuid_format;
 struuid_format 
----------------
 t
(1 row)

/* LCASE */
SELECT lcase('BAR');
 lcase 
-------
 "bar"
(1 row)

SELECT lcase('"BAR"');
 lcase 
-------
 "bar"
(1 row)

SELECT lcase('"BAR"@en'), lcase(strlang('BAR','en'));
  lcase   |  lcase   
----------+----------
 "bar"@en | "bar"@en
(1 row)

SELECT lcase('"BAR"^^xsd:string'), lcase(strdt('BAR','xsd:string'));
                      lcase                       |                      lcase                       
--------------------------------------------------+--------------------------------------------------
 "bar"^^<http://www.w3.org/2001/XMLSchema#string> | "bar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT lcase('<http://example.org>');
ERROR:  LCASE does not allow IRIs: <http://example.org>
SELECT lcase('_:xyz');
ERROR:  LCASE does not allow blank nodes: _:xyz
SELECT lcase(bnode('foo'));
ERROR:  LCASE does not allow blank nodes: _:foo
SELECT lcase('123');
 lcase 
-------
 "123"
(1 row)

SELECT lcase('"123"');
 lcase 
-------
 "123"
(1 row)

SELECT lcase('"123"^^xsd:integer');
ERROR:  LCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#integer>
SELECT lcase('"1990-10-03"^^xsd:date');
ERROR:  LCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#date>
SELECT lcase('"!§$%&/()?ß}{}[]°^|<>*"');
          lcase          
-------------------------
 "!§$%&/()?ß}{}[]°^|<>*"
(1 row)

SELECT lcase(NULL);
 lcase 
-------
 NULL
(1 row)

SELECT lcase('');
 lcase 
-------
 ""
(1 row)

SELECT lcase('""');
 lcase 
-------
 ""
(1 row)

SELECT lcase('" "');
 lcase 
-------
 " "
(1 row)

SELECT lcase(' ');
 lcase 
-------
 " "
(1 row)

SELECT p, o, lcase(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND   
  lcase(o) = lcase('"PostgreSQL"@en') AND
  lcase(o) = lcase(strlang('PostgreSQL','en'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LCASE(?o) = "postgresql"@en)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |      lcase      
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "postgresql"@en
(1 row)

SELECT p, o, lcase(strdt(o,'xsd:string'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND   
  strstarts(lcase(strdt(o,'xsd:string')), lcase(strdt('POSTGRE','xsd:string')));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(STRSTARTS(LCASE(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>)), "postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 20 records.

                      p                       |        o        |                          lcase                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
(20 rows)

/* UCASE */
SELECT ucase('bar');
 ucase 
-------
 "BAR"
(1 row)

SELECT ucase('"bar"');
 ucase 
-------
 "BAR"
(1 row)

SELECT ucase('"bar"@en'), ucase(strlang('bar','en'));
  ucase   |  ucase   
----------+----------
 "BAR"@en | "BAR"@en
(1 row)

SELECT ucase('"bar"^^xsd:string'), ucase(strdt('bar','xsd:string'));
                      ucase                       |                      ucase                       
--------------------------------------------------+--------------------------------------------------
 "BAR"^^<http://www.w3.org/2001/XMLSchema#string> | "BAR"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT ucase('<http://example.org>');
ERROR:  UCASE does not allow IRIs: <http://example.org>
SELECT ucase('_:xyz');
ERROR:  UCASE does not allow blank nodes: _:xyz
SELECT ucase(bnode('foo'));
ERROR:  UCASE does not allow blank nodes: _:foo
SELECT ucase('123');
 ucase 
-------
 "123"
(1 row)

SELECT ucase('"123"');
 ucase 
-------
 "123"
(1 row)

SELECT ucase('"123"^^xsd:integer');
ERROR:  UCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#integer>
SELECT ucase('"1990-10-03"^^xsd:date');
ERROR:  UCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#date>
SELECT ucase('"!§$%&/()?ß}{}[]°^|<>*"');
          ucase          
-------------------------
 "!§$%&/()?ß}{}[]°^|<>*"
(1 row)

SELECT ucase(NULL);
 ucase 
-------
 NULL
(1 row)

SELECT ucase('');
 ucase 
-------
 ""
(1 row)

SELECT ucase('""');
 ucase 
-------
 ""
(1 row)

SELECT ucase('" "');
 ucase 
-------
 " "
(1 row)

SELECT ucase(' ');
 ucase 
-------
 " "
(1 row)

SELECT p, o, ucase(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND   
  ucase(o) = ucase('"PostgreSQL"@es') AND
  ucase(o) = ucase(strlang('PostgreSQL','es'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(UCASE(?o) = "POSTGRESQL"@es)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |      ucase      
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "POSTGRESQL"@es
(1 row)

SELECT p, o, ucase(strdt(o,'xsd:string'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  strstarts(ucase(strdt(o,'xsd:string')), ucase(strdt('postgre','xsd:string')));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(STRSTARTS(UCASE(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>)), "POSTGRE"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 20 records.

                      p                       |        o        |                          ucase                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
(20 rows)

/* STRLEN */
SELECT strlen('chat'), strlen('"chat"');
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT strlen('"chat"@en'), strlen(strlang('chat','en'));
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT strlen('"chat"^^xsd:string'), strlen(strdt('chat','xsd:string'));
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT strlen('""'), strlen('');
 strlen | strlen 
--------+--------
      0 |      0
(1 row)

SELECT strlen('" "'), strlen(' ');
 strlen | strlen 
--------+--------
      1 |      1
(1 row)

SELECT strlen('"łø"'), strlen('łø');
 strlen | strlen 
--------+--------
      2 |      2
(1 row)

SELECT strlen(NULL);
 strlen 
--------
   NULL
(1 row)

SELECT p, o, strlen(o)
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'de') AND
  strlen(o) = strlen('"PostgreSQL"@de');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRLEN(?o) = 10)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strlen 
----------------------------------------------+-----------------+--------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de |     10
(1 row)

/* SUBSTR */
SELECT substr_rdf('"foobar"', 4), substr_rdf('foobar', 4);
 substr_rdf | substr_rdf 
------------+------------
 "bar"      | "bar"
(1 row)

SELECT substr_rdf('"foobar"@en', 4), substr_rdf(strlang('foobar','en'), 4);
 substr_rdf | substr_rdf 
------------+------------
 "bar"@en   | "bar"@en
(1 row)

SELECT substr_rdf('"foobar"^^xsd:string', 4), substr_rdf(strdt('foobar','xsd:string'), 4);
                    substr_rdf                    |                    substr_rdf                    
--------------------------------------------------+--------------------------------------------------
 "bar"^^<http://www.w3.org/2001/XMLSchema#string> | "bar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT substr_rdf('"foobar"', 4, 1), substr_rdf('foobar', 4, 1);
 substr_rdf | substr_rdf 
------------+------------
 "b"        | "b"
(1 row)

SELECT substr_rdf('"foobar"@en', 4, 1), substr_rdf(strlang('foobar','en'), 4, 1);
 substr_rdf | substr_rdf 
------------+------------
 "b"@en     | "b"@en
(1 row)

SELECT substr_rdf('"foobar"^^xsd:string', 4, 1), substr_rdf(strdt('foobar','xsd:string'), 4, 1);
                   substr_rdf                   |                   substr_rdf                   
------------------------------------------------+------------------------------------------------
 "b"^^<http://www.w3.org/2001/XMLSchema#string> | "b"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT substr_rdf('""', 42);
 substr_rdf 
------------
 ""
(1 row)

SELECT substr_rdf('', 42);
 substr_rdf 
------------
 ""
(1 row)

SELECT substr_rdf(NULL, 42);
 substr_rdf 
------------
 NULL
(1 row)

SELECT substr_rdf('"foo"', NULL);
 substr_rdf 
------------
 NULL
(1 row)

SELECT p, o, substr_rdf(o, 7, 3), substr_rdf(strdt(o,'xsd:string'), 7, 3) 
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  substr_rdf(o, 7, 3) = substr_rdf('"PostgreSQL"@es', 7, 3) AND
  substr_rdf(strdt(o,'xsd:string'), 7, 3) = substr_rdf(strdt('PostgreSQL','xsd:string'), 7, 3) AND
  substr_rdf(o, 7) = substr_rdf('"PostgreSQL"@es', 7) AND
  substr_rdf(strlang(o,'es'), 7, 3) = substr_rdf(strlang('PostgreSQL','es'), 7, 3) AND
  langmatches(lang(o), 'es');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(SUBSTR(?o, 7, 3) = "eSQ"@es)
 FILTER(SUBSTR(STRLANG(?o, "es"), 7, 3) = "eSQ"@es)
 FILTER(SUBSTR(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>), 7, 3) = "eSQ"^^<http://www.w3.org/2001/XMLSchema#string>)
 FILTER(SUBSTR(?o, 7) = "eSQL"@es)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | substr_rdf |                    substr_rdf                    
----------------------------------------------+-----------------+------------+--------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "eSQ"@es   | "eSQ"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

/* CONCAT */
SELECT concat_rdf('"foo"', '"bar"'), concat_rdf('foo', 'bar');
 concat_rdf | concat_rdf 
------------+------------
 "foobar"   | "foobar"
(1 row)

SELECT concat_rdf('"foo"@en', '"bar"@en'), concat_rdf(strlang('foo','en'), strlang('bar','en'));
 concat_rdf  | concat_rdf  
-------------+-------------
 "foobar"@en | "foobar"@en
(1 row)

SELECT concat_rdf('"foo"^^xsd:string', '"bar"^^xsd:string'), concat_rdf(strdt('foo','xsd:string'), strdt('bar','xsd:string'));
                     concat_rdf                      |                     concat_rdf                      
-----------------------------------------------------+-----------------------------------------------------
 "foobar"^^<http://www.w3.org/2001/XMLSchema#string> | "foobar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT concat_rdf('"foo"', '"bar"^^xsd:string'), concat_rdf('foo', strdt('bar','xsd:string'));
 concat_rdf | concat_rdf 
------------+------------
 "foobar"   | "foobar"
(1 row)

SELECT concat_rdf('"foo"@en', '"bar"'), concat_rdf(strlang('foo','en'), 'bar');
 concat_rdf | concat_rdf 
------------+------------
 "foobar"   | "foobar"
(1 row)

SELECT concat_rdf('"foo"@en', '"bar"^^xsd:string'), concat_rdf(strlang('foo','en'), strdt('bar','xsd:string'));
 concat_rdf | concat_rdf 
------------+------------
 "foobar"   | "foobar"
(1 row)

SELECT concat_rdf(NULL, 'bar'), concat_rdf('foo', NULL), concat_rdf(NULL, NULL);
 concat_rdf | concat_rdf | concat_rdf 
------------+------------+------------
 NULL       | NULL       | NULL
(1 row)

SELECT concat_rdf('foo', ''), concat_rdf('', 'bar'), concat_rdf('', ''), concat_rdf('""', '""');
 concat_rdf | concat_rdf | concat_rdf | concat_rdf 
------------+------------+------------+------------
 "foo"      | "bar"      | ""         | ""
(1 row)

SELECT concat_rdf('"foo"^^foo:bar', 'bar'), concat_rdf('"foo"', '"bar"^^foo:bar');
ERROR:  CONCAT arguments must be simple literals or 'xsd:string'
SELECT p, o, concat_rdf(o,strlang(' Global','pt')), concat_rdf(o,strdt(' Global','xsd:string'))
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'pt') AND
  concat_rdf(o,'') = str('PostgreSQL');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(CONCAT(?o, "") = "PostgreSQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |       concat_rdf       |     concat_rdf      
----------------------------------------------+-----------------+------------------------+---------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "PostgreSQL Global"@pt | "PostgreSQL Global"
(1 row)

/* REPLACE */
SELECT replace_rdf('"abcd"', '"b"', '"Z"'), replace_rdf('abcd', 'b', 'Z');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZcd"      | "aZcd"
(1 row)

SELECT replace_rdf('"abab"', '"B"', '"Z"','"i"'), replace_rdf('abab', 'B', 'Z','i');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZaZ"      | "aZaZ"
(1 row)

SELECT replace_rdf('"abab"', '"B."', '"Z"','"i"'), replace_rdf('abab', 'B.', 'Z','i');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZb"       | "aZb"
(1 row)

SELECT replace_rdf('"abcd"@en', '"b"', '"Z"'), replace_rdf(strlang('abcd','en'), 'b', 'Z');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZcd"      | "aZcd"
(1 row)

SELECT replace_rdf('"abab"^^xsd:string', '"B"', '"Z"','"i"'), replace_rdf(strdt('abab','xsd:string'), 'B', 'Z','i');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZaZ"      | "aZaZ"
(1 row)

SELECT replace_rdf('"abcd"', '"b"@en', '"Z"'), replace_rdf('abcd', strlang('b','en'), 'Z');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZcd"      | "aZcd"
(1 row)

SELECT replace_rdf('"abab"', '"B"^^xsd:string', '"Z"','"i"'), replace_rdf('abab', strdt('B','xsd:string'), 'Z','i');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZaZ"      | "aZaZ"
(1 row)

SELECT replace_rdf('""', '"b"', '"Z"'), replace_rdf('', 'b', 'Z');
 replace_rdf | replace_rdf 
-------------+-------------
 ""          | ""
(1 row)

SELECT replace_rdf('"abcd"', '""', '"Z"'), replace_rdf('abcd', '', 'Z');
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text) line 4 at RAISE
SELECT replace_rdf('"abcd"', '"b"', '""'), replace_rdf('abcd', 'b', '');
 replace_rdf | replace_rdf 
-------------+-------------
 "acd"       | "acd"
(1 row)

SELECT replace_rdf('"ab\"cd"', '"b"', '"Z"'), replace_rdf('ab\"cd', 'b', 'Z');
 replace_rdf | replace_rdf 
-------------+-------------
 "aZ\"cd"    | "aZ\"cd"
(1 row)

SELECT replace_rdf(NULL, 'b', 'Z'), replace_rdf('abcd', NULL, 'Z'), replace_rdf('abcd', 'b', NULL), replace_rdf('abcd', 'b', 'Z', NULL);
 replace_rdf | replace_rdf | replace_rdf | replace_rdf 
-------------+-------------+-------------+-------------
 NULL        | NULL        | NULL        | NULL
(1 row)

SELECT replace_rdf('', 'a', 'Z');                -- Empty input string
 replace_rdf 
-------------
 ""
(1 row)

SELECT replace_rdf('abcd', '', 'Z');             -- Empty pattern
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text) line 4 at RAISE
SELECT replace_rdf('abcd', 'a', '');             -- Empty replacement
 replace_rdf 
-------------
 "bcd"
(1 row)

SELECT replace_rdf('', '', 'Z');                 -- Empty pattern and replacement
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text) line 4 at RAISE
SELECT replace_rdf('abcd', 'a', 'Z');            -- Pattern at the beginning
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('abcd', 'd', 'Z');            -- Pattern at the end
 replace_rdf 
-------------
 "abcZ"
(1 row)

SELECT replace_rdf('abcd', 'bc', 'Z');           -- Pattern in the middle
 replace_rdf 
-------------
 "aZd"
(1 row)

SELECT replace_rdf('aabbcc', 'b', 'Z');          -- Multiple occurrences of the pattern
 replace_rdf 
-------------
 "aaZZcc"
(1 row)

SELECT replace_rdf('Abcd', 'a', 'Z');            -- Case mismatch pattern
 replace_rdf 
-------------
 "Abcd"
(1 row)

SELECT replace_rdf('abcd', 'A', 'Z');            -- Case mismatch pattern (uppercase in input)
 replace_rdf 
-------------
 "abcd"
(1 row)

SELECT replace_rdf('abcd', 'A', 'Z','i');        -- Case-insensitive replacement
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('"abcd"', '"b"', '"Z"');      -- Special characters inside quotes
 replace_rdf 
-------------
 "aZcd"
(1 row)

SELECT replace_rdf('ab\cd', 'b\\', 'Z');         -- Escaped backslashes
 replace_rdf 
-------------
 "ab\cd"
(1 row)

SELECT replace_rdf('ab"cd', '"b"', '"Z"');       -- Quotes in the input
 replace_rdf 
-------------
 "aZ\"cd"
(1 row)

SELECT replace_rdf('ab"cd', 'b"', 'Z');          -- Quotes in pattern
 replace_rdf 
-------------
 "aZcd"
(1 row)

SELECT replace_rdf('abcdef', 'bc', 'ZY');        -- Multi-character pattern in the middle
 replace_rdf 
-------------
 "aZYdef"
(1 row)

SELECT replace_rdf('abc abc', 'abc', 'XYZ');     -- Multiple occurrences of a multi-character pattern
 replace_rdf 
-------------
 "XYZ XYZ"
(1 row)

SELECT replace_rdf('abcd', 'a', 'Z');            -- Pattern at the start
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('abcd', 'd', 'Z');            -- Pattern at the end
 replace_rdf 
-------------
 "abcZ"
(1 row)

SELECT replace_rdf('abcdabcd', 'abcd', 'XYZ');   -- Pattern at the start and repeated
 replace_rdf 
-------------
 "XYZXYZ"
(1 row)

SELECT replace_rdf(NULL, 'a', 'Z');              -- Input is NULL
 replace_rdf 
-------------
 NULL
(1 row)

SELECT replace_rdf('abcd', NULL, 'Z');           -- Pattern is NULL
 replace_rdf 
-------------
 NULL
(1 row)

SELECT replace_rdf('abcd', 'a', NULL);           -- Replacement is NULL
 replace_rdf 
-------------
 NULL
(1 row)

SELECT replace_rdf(NULL, NULL, NULL);             -- All NULLs
 replace_rdf 
-------------
 NULL
(1 row)

SELECT replace_rdf('"ab\"cd"', '"b"', '"Z"');    -- Escaped double quotes
 replace_rdf 
-------------
 "aZ\"cd"
(1 row)

SELECT replace_rdf('"ab\"cd"', 'b', 'Z');         -- Escaped double quotes, no pattern
 replace_rdf 
-------------
 "aZ\"cd"
(1 row)

SELECT replace_rdf('"abcd"@en', 'a', 'Z');       -- Language-tagged literal
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('"abcd"^^xsd:string', 'a', 'Z'); -- Datatype-literal (xsd:string)
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('"abcd"^^xsd:date', 'a', 'Z'); -- Datatype-literal (xsd:date)
 replace_rdf 
-------------
 "Zbcd"
(1 row)

SELECT replace_rdf('ababab', 'ab', 'XY', 'g');   -- Global replacement
 replace_rdf 
-------------
 "XYXYXY"
(1 row)

SELECT replace_rdf('ababab', 'ab', 'XY');         -- Non-global replacement (should only replace first occurrence)
 replace_rdf 
-------------
 "XYXYXY"
(1 row)

SELECT replace_rdf('abcd', '', 'Z', 'g');         -- Empty pattern with global flag
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text,text) line 4 at RAISE
SELECT replace_rdf('abcd', '', 'Z');              -- Empty pattern without global flag
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text) line 4 at RAISE
SELECT replace_rdf('abcd', 'z', 'Z');             -- No pattern match
 replace_rdf 
-------------
 "abcd"
(1 row)

SELECT replace_rdf('abcd', 'xy', 'Z');            -- No match for multi-character pattern
 replace_rdf 
-------------
 "abcd"
(1 row)

SELECT replace_rdf('a' || repeat('b', 1000) || 'c', 'b', 'Z');  -- Long string with repeated pattern
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 replace_rdf                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

 "ac"
(1 row)

SELECT replace_rdf('abcd', 'abcd', 'XYZ');       -- Pattern matches the entire string
 replace_rdf 
-------------
 "XYZ"
(1 row)

SELECT replace_rdf('abcdabcd', 'abcd', 'XYZ');   -- Pattern matches at the start
 replace_rdf 
-------------
 "XYZXYZ"
(1 row)

SELECT replace_rdf('""', '"b"', '"Z"');           -- Empty literal as input
 replace_rdf 
-------------
 ""
(1 row)

SELECT replace_rdf('"b"', '""', '"Z"');            -- Empty pattern in replacement
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function replace_rdf(text,text,text) line 4 at RAISE
SELECT replace_rdf('abcd', 'a.b', 'Z', 'g');      -- Dot in pattern (regex)
 replace_rdf 
-------------
 "abcd"
(1 row)

SELECT replace_rdf('abcd', '[a-b]', 'Z', 'g');     -- Range in regex pattern
 replace_rdf 
-------------
 "ZZcd"
(1 row)

SELECT replace_rdf('abcd', '(ab)', 'Z', 'g');      -- Group in regex pattern
 replace_rdf 
-------------
 "Zcd"
(1 row)

SELECT p, o, replace_rdf(o,'Postgre','My'), replace_rdf(o,'"Postgre"@de','')
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'es') AND
  replace_rdf(o,'Postgre','My') = replace_rdf(strlang('PostgreSQL','es'),'Postgre','My') AND
  replace_rdf(o, 'POSTGRE', 'My','i') = replace_rdf('"PostgreSQL"@es', 'POSTGRE', 'My','i');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(REPLACE(?o, "Postgre", "My") = "MySQL")
 FILTER(REPLACE(?o, "POSTGRE", "My", "i") = "MySQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | replace_rdf | replace_rdf 
----------------------------------------------+-----------------+-------------+-------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "MySQL"     | "SQL"
(1 row)

/* REGEX */
SELECT regex('"abcd"', '"bc"');
 regex 
-------
 t
(1 row)

SELECT regex('"abcd"', '"xy"');
 regex 
-------
 f
(1 row)

SELECT regex('"abcd"', '"BC"', '"i"');
 regex 
-------
 t
(1 row)

SELECT regex('"abcd"', '"^bc"');
 regex 
-------
 f
(1 row)

SELECT regex('"abcd"', '"^ab"');
 regex 
-------
 t
(1 row)

SELECT regex('"abc\ndef"', '"^def$"', '"m"');
ERROR:  Unsupported regex flags: m (only "i" is supported)
CONTEXT:  PL/pgSQL function regex(text,text,text) line 8 at RAISE
SELECT regex('"abc\ndef"', '"c.d"', '"s"');
ERROR:  Unsupported regex flags: s (only "i" is supported)
CONTEXT:  PL/pgSQL function regex(text,text,text) line 8 at RAISE
SELECT regex('"abcd"@en', '"bc"');
 regex 
-------
 t
(1 row)

SELECT regex('"123"^^xsd:int', '"23"');
 regex 
-------
 t
(1 row)

SELECT regex('""', '"a"');
 regex 
-------
 f
(1 row)

SELECT regex('""', '"(.*)"');
 regex 
-------
 t
(1 row)

SELECT regex('"abcd"', '""');
 regex 
-------
 f
(1 row)

SELECT regex(NULL, '"a"'), regex('"abcd"', NULL), regex('"abcd"', '"a"', NULL);
 regex | regex | regex 
-------+-------+-------
 NULL  | NULL  | NULL
(1 row)

SELECT regex('"abcd"', '"[a"');
ERROR:  invalid regular expression: brackets [] not balanced
CONTEXT:  PL/pgSQL function regex(text,text) line 6 at RETURN
SELECT p, o
FROM ftdbp
WHERE 
  p = iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  langmatches(lang(o),'es') AND
  regex(o, ucase('postgres'), 'i') AND 
  regex(o, '^pOs','i') ;
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(REGEX(?o, "POSTGRES", "i"))
 FILTER(REGEX(?o, "^pOs", "i"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        
----------------------------------------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es
(1 row)

DROP SERVER dbpedia CASCADE;
NOTICE:  drop cascades to foreign table ftdbp
