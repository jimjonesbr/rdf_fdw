\pset null NULL
--SET search_path TO sparql, pg_catalog;
CREATE SERVER dbpedia 
FOREIGN DATA WRAPPER rdf_fdw 
OPTIONS (endpoint 'https://dbpedia.org/sparql');
CREATE FOREIGN TABLE ftdbp (
  p text    OPTIONS (variable '?p', literal_format 'raw'),
  o text    OPTIONS (variable '?o', literal_format 'raw')
)
SERVER dbpedia OPTIONS (
  log_sparql 'true',
  sparql 'SELECT * WHERE { <http://dbpedia.org/resource/PostgreSQL> ?p ?o }');
SELECT sparql.rdf_fdw_arguments_compatible('"abc"','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"','"b"^^<xsd:string>');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"^^<xsd:string>','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"^^<xsd:string>','"b"^^<xsd:string>');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"@en','"b"');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"@en','"b"^^xsd:string');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"@en','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 t
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"@fr','"b"@ja');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"','"b"@ja');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

SELECT sparql.rdf_fdw_arguments_compatible('"abc"^^xsd:string','"b"@en');
 rdf_fdw_arguments_compatible 
------------------------------
 f
(1 row)

/* LEX */  
SELECT sparql.lex('"foo"');
 lex 
-----
 foo
(1 row)

SELECT sparql.lex('foo');
 lex 
-----
 foo
(1 row)

SELECT sparql.lex('"foo"@en');
 lex 
-----
 foo
(1 row)

SELECT sparql.lex('"foo"^^xsd:string');
 lex 
-----
 foo
(1 row)

SELECT sparql.lex(''); 
 lex 
-----
 
(1 row)

SELECT sparql.lex('""');
 lex 
-----
 
(1 row)

SELECT sparql.lex('"\""');
 lex 
-----
 \"
(1 row)

SELECT sparql.lex(NULL);
 lex  
------
 NULL
(1 row)

/* STRDT */
SELECT sparql.strdt(NULL, 'http://www.w3.org/2001/XMLSchema#string');
 strdt 
-------
 NULL
(1 row)

SELECT sparql.strdt('foo', NULL);
 strdt 
-------
 NULL
(1 row)

SELECT sparql.strdt('', '<http://example.org/type>');
             strdt             
-------------------------------
 ""^^<http://example.org/type>
(1 row)

SELECT sparql.strdt('foo', '');
ERROR:  datatype IRI cannot be empty
SELECT sparql.strdt('foo', ' ');
ERROR:  datatype IRI cannot contain whitespaces
SELECT sparql.strdt('foo', ' xsd:boolean ');
ERROR:  datatype IRI cannot contain whitespaces
SELECT sparql.strdt('foo', 'http://www.w3.org/2001/XMLSchema#string');
                      strdt                       
--------------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strdt('f"oo', 'http://example.org/type');
               strdt                
------------------------------------
 "f\"oo"^^<http://example.org/type>
(1 row)

SELECT sparql.strdt('"foo"@en', 'http://www.w3.org/2001/XMLSchema#int');
                     strdt                     
-----------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#int>
(1 row)

SELECT sparql.strdt('"f\"oo"^^xsd:string', 'http://example.org/newtype');
                 strdt                 
---------------------------------------
 "f\"oo"^^<http://example.org/newtype>
(1 row)

SELECT sparql.strdt('foo', '<http://example.org/type>');
              strdt               
----------------------------------
 "foo"^^<http://example.org/type>
(1 row)

SELECT sparql.strdt('foo', 'foo:bar');
      strdt       
------------------
 "foo"^^<foo:bar>
(1 row)

SELECT sparql.strdt('foo', 'xsd:string');
                      strdt                       
--------------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strdt('foo', '<nonsense>');
       strdt       
-------------------
 "foo"^^<nonsense>
(1 row)

SELECT p, o, sparql.strdt(o,'xsd:string')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.strdt(o,'xsd:string') = sparql.strdt('PostgreSQL','xsd:string') AND
  sparql.langmatches(sparql.lang(o),'en');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "en"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>) = "PostgreSQL"^^<http://www.w3.org/2001/XMLSchema#string>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |                          strdt                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "PostgreSQL"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

/* STRLANG */
SELECT sparql.strlang('foo',NULL);
 strlang 
---------
 NULL
(1 row)

SELECT sparql.strlang(NULL,'de');
 strlang 
---------
 NULL
(1 row)

SELECT sparql.strlang('','es');
 strlang 
---------
 ""@es
(1 row)

SELECT sparql.strlang(' ','en');
 strlang 
---------
 " "@en
(1 row)

SELECT sparql.strlang('foo','pt');
 strlang  
----------
 "foo"@pt
(1 row)

SELECT sparql.strlang('"foo"@en','fr');
 strlang  
----------
 "foo"@fr
(1 row)

SELECT sparql.strlang('"foo"','it');
 strlang  
----------
 "foo"@it
(1 row)

SELECT sparql.strlang('"foo"^^xsd:string','pt');
 strlang  
----------
 "foo"@pt
(1 row)

SELECT sparql.strlang('"foo"^^<http://www.w3.org/2001/XMLSchema#string>','es');
 strlang  
----------
 "foo"@es
(1 row)

SELECT sparql.strlang(sparql.strlang('"foo"^^<http://www.w3.org/2001/XMLSchema#string>','es'),'de');
 strlang  
----------
 "foo"@de
(1 row)

SELECT sparql.strlang(sparql.strlang('f"o"o','en'),'de');
   strlang    
--------------
 "f\"o\"o"@de
(1 row)

SELECT sparql.strlang(sparql.strlang('x\"y','pl'),'it');
  strlang  
-----------
 "x\"y"@it
(1 row)

SELECT sparql.strlang('foo', 'xyz');
  strlang  
-----------
 "foo"@xyz
(1 row)

SELECT p, o, sparql.strlang(o,'fr')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'de') AND
  sparql.lang(sparql.strlang(o,'fr')) = 'fr';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LANG(STRLANG(?o, "fr")) = "fr")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |     strlang     
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "PostgreSQL"@fr
(1 row)

/* STR */
SELECT sparql.str('foo');
  str  
-------
 "foo"
(1 row)

SELECT sparql.str('"foo"');
  str  
-------
 "foo"
(1 row)

SELECT sparql.str('"foo"@en');
  str  
-------
 "foo"
(1 row)

SELECT sparql.str('"foo"^^xsd:string');
  str  
-------
 "foo"
(1 row)

SELECT sparql.str('f"oo');
   str   
---------
 "f\"oo"
(1 row)

SELECT sparql.str('"f\"oo"');
   str   
---------
 "f\"oo"
(1 row)

SELECT sparql.str('<http://example.org/foo>');
           str            
--------------------------
 "http://example.org/foo"
(1 row)

SELECT sparql.str('');
 str 
-----
 ""
(1 row)

SELECT sparql.str(' ');
 str 
-----
 " "
(1 row)

SELECT sparql.str(NULL);
 str  
------
 NULL
(1 row)

SELECT p, o, sparql.str(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'es') AND
  sparql.str(o) = sparql.str('PostgreSQL') AND sparql.str(o) = '"PostgreSQL"';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STR(?o) = "PostgreSQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |     str      
----------------------------------------------+-----------------+--------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "PostgreSQL"
(1 row)

/* LANG */
SELECT sparql.lang('"foo"@en');
 lang 
------
 en
(1 row)

SELECT sparql.lang(sparql.strlang('foo','fr'));
 lang 
------
 fr
(1 row)

SELECT sparql.lang(sparql.strdt('foo','xsd:string'));
 lang 
------
 
(1 row)

SELECT sparql.lang('"f"oo"@it');
 lang 
------
 it
(1 row)

SELECT sparql.lang('');
 lang 
------
 
(1 row)

SELECT sparql.lang(' ');
 lang 
------
 
(1 row)

SELECT sparql.lang(NULL);
 lang 
------
 NULL
(1 row)

SELECT sparql.lang('<http://example.org>'); 
 lang 
------
 
(1 row)

SELECT p, o, sparql.lang(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.lang(o) = 'es';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LANG(?o) = "es")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | lang 
----------------------------------------------+-----------------+------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | es
(1 row)

/* DATATYPE */
SELECT sparql.datatype('"foo"^^xsd:string');
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.datatype('"foo"^^<http://www.w3.org/2001/XMLSchema#string>');
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.datatype(sparql.strdt('foo','xsd:string'));
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.datatype('"42"^^<xsd:int>');
                datatype                
----------------------------------------
 <http://www.w3.org/2001/XMLSchema#int>
(1 row)

SELECT sparql.datatype(sparql.strdt('foo','bar:xyz'));
 datatype  
-----------
 <bar:xyz>
(1 row)

SELECT sparql.datatype('"foo"@es');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype('');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype(' ');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype('"foo"^<xsd:string>');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype('"foo"^^xsd:string>');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype('"foo"^^<xsd:string');
 datatype 
----------
 
(1 row)

SELECT sparql.datatype(cast('2018-05-01' AS date));
                datatype                 
-----------------------------------------
 <http://www.w3.org/2001/XMLSchema#date>
(1 row)

SELECT sparql.datatype(cast('2018-05-01 11:30:00' AS timestamp without time zone));
                  datatype                   
---------------------------------------------
 <http://www.w3.org/2001/XMLSchema#dateTime>
(1 row)

SELECT sparql.datatype(cast('2018-05-01 11:30:00' AS timestamp with time zone));
                  datatype                   
---------------------------------------------
 <http://www.w3.org/2001/XMLSchema#dateTime>
(1 row)

SELECT sparql.datatype(cast('11:30:00' AS time));
                datatype                 
-----------------------------------------
 <http://www.w3.org/2001/XMLSchema#time>
(1 row)

SELECT sparql.datatype(42);
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#integer>
(1 row)

SELECT sparql.datatype(42.73);
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#decimal>
(1 row)

SELECT sparql.datatype(cast(42 AS smallint));
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#integer>
(1 row)

SELECT sparql.datatype(cast(42 AS bigint));
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#integer>
(1 row)

SELECT sparql.datatype(cast(42.73 AS double precision));
                 datatype                  
-------------------------------------------
 <http://www.w3.org/2001/XMLSchema#double>
(1 row)

SELECT sparql.datatype(cast(42.73 AS numeric));
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#decimal>
(1 row)

SELECT sparql.datatype(cast(42.73 AS real));
                 datatype                 
------------------------------------------
 <http://www.w3.org/2001/XMLSchema#float>
(1 row)

SELECT sparql.datatype(true);
                  datatype                  
--------------------------------------------
 <http://www.w3.org/2001/XMLSchema#boolean>
(1 row)

SELECT sparql.datatype(NULL);
 datatype 
----------
 NULL
(1 row)

SELECT p, o, sparql.datatype(o)
FROM ftdbp 
WHERE 
  sparql.datatype(o) = sparql.iri('http://www.w3.org/2001/XMLSchema#nonNegativeInteger') AND
  sparql.datatype(o) = sparql.iri('"http://www.w3.org/2001/XMLSchema#nonNegativeInteger"') AND
  sparql.datatype(o) = '<http://www.w3.org/2001/XMLSchema#nonNegativeInteger>';
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(DATATYPE(?o) = <http://www.w3.org/2001/XMLSchema#nonNegativeInteger>)
}

INFO:  SPARQL returned 1 record.

                      p                       |                               o                                |                       datatype                        
----------------------------------------------+----------------------------------------------------------------+-------------------------------------------------------
 <http://dbpedia.org/ontology/wikiPageLength> | "91177"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger> | <http://www.w3.org/2001/XMLSchema#nonNegativeInteger>
(1 row)

/* ENCODES_FOR_URI */
SELECT sparql.encode_for_uri('"Los Angeles"');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT sparql.encode_for_uri('"Los Angeles"@en');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT sparql.encode_for_uri('"Los Angeles"^^xsd:string');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT sparql.encode_for_uri('"Los Angeles"^^<xsd:string>');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT sparql.encode_for_uri('"Los Angeles"^^<http://www.w3.org/2001/XMLSchema#string>');
 encode_for_uri  
-----------------
 "Los%20Angeles"
(1 row)

SELECT sparql.encode_for_uri('foo! *''();:@&=+$,/?#[]');
                         encode_for_uri                         
----------------------------------------------------------------
 "foo%21%20%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D"
(1 row)

SELECT sparql.encode_for_uri('foo');
 encode_for_uri 
----------------
 "foo"
(1 row)

SELECT sparql.encode_for_uri('');
 encode_for_uri 
----------------
 ""
(1 row)

SELECT sparql.encode_for_uri(NULL);
 encode_for_uri 
----------------
 NULL
(1 row)

SELECT p, o, sparql.encode_for_uri(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://dbpedia.org/property/developer') AND
  sparql.encode_for_uri(o) = sparql.encode_for_uri('PostgreSQL Global Development Group') AND
  sparql.encode_for_uri(o) = sparql.encode_for_uri(sparql.strlang('PostgreSQL Global Development Group','de'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/developer>)
 FILTER(ENCODE_FOR_URI(?o) = "PostgreSQL%20Global%20Development%20Group")
}

INFO:  SPARQL returned 1 record.

                    p                    |                    o                     |               encode_for_uri                
-----------------------------------------+------------------------------------------+---------------------------------------------
 <http://dbpedia.org/property/developer> | "PostgreSQL Global Development Group"@en | "PostgreSQL%20Global%20Development%20Group"
(1 row)

/* IRI / URI */
SELECT sparql.iri('"http://example/"'), sparql.iri('http://example/'), sparql.iri('<http://example/>');
        iri        |        iri        |        iri        
-------------------+-------------------+-------------------
 <http://example/> | <http://example/> | <http://example/>
(1 row)

SELECT sparql.iri('"mailto:foo@example.com"'), sparql.iri('mailto:foo@example.com'), sparql.iri('<mailto:foo@example.com>');
           iri            |           iri            |           iri            
--------------------------+--------------------------+--------------------------
 <mailto:foo@example.com> | <mailto:foo@example.com> | <mailto:foo@example.com>
(1 row)

SELECT sparql.iri('"urn:uuid:123e4567-e89b-12d3-a456-426614174000"'), sparql.iri('urn:uuid:123e4567-e89b-12d3-a456-426614174000'), sparql.iri('<urn:uuid:123e4567-e89b-12d3-a456-426614174000>');
                       iri                       |                       iri                       |                       iri                       
-------------------------------------------------+-------------------------------------------------+-------------------------------------------------
 <urn:uuid:123e4567-e89b-12d3-a456-426614174000> | <urn:uuid:123e4567-e89b-12d3-a456-426614174000> | <urn:uuid:123e4567-e89b-12d3-a456-426614174000>
(1 row)

SELECT sparql.iri('"file://etc/passwd"'), sparql.iri('file://etc/passwd'), sparql.iri('<file://etc/passwd>');
         iri         |         iri         |         iri         
---------------------+---------------------+---------------------
 <file://etc/passwd> | <file://etc/passwd> | <file://etc/passwd>
(1 row)

SELECT sparql.iri('"foo:bar"'), sparql.iri('foo:bar'), sparql.iri('<foo:bar>');
    iri    |    iri    |    iri    
-----------+-----------+-----------
 <foo:bar> | <foo:bar> | <foo:bar>
(1 row)

SELECT sparql.iri('"foo"'), sparql.iri('foo'), sparql.iri('<foo>');
  iri  |  iri  |   iri   
-------+-------+---------
 <foo> | <foo> | <<foo>>
(1 row)

SELECT sparql.iri('"a:b:c"'), sparql.iri('a:b:c'), sparql.iri('<a:b:c>');
   iri   |   iri   |   iri   
---------+---------+---------
 <a:b:c> | <a:b:c> | <a:b:c>
(1 row)

SELECT sparql.iri('"http:/not-a-scheme"'), sparql.iri('http:/not-a-scheme'), sparql.iri('<http:/not-a-scheme>');
         iri          |         iri          |         iri          
----------------------+----------------------+----------------------
 <http:/not-a-scheme> | <http:/not-a-scheme> | <http:/not-a-scheme>
(1 row)

SELECT sparql.iri('"foo"@en');
  iri  
-------
 <foo>
(1 row)

SELECT sparql.iri('"42"^^<http://www.w3.org/2001/XMLSchema#int>');
 iri  
------
 <42>
(1 row)

SELECT p, o, sparql.iri(p) FROM ftdbp 
WHERE 
  sparql.iri(p) = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.iri(p) = sparql.iri('"http://dbpedia.org/property/released"') AND
  sparql.iri(p) = sparql.iri('"http://dbpedia.org/property/released"@en') AND
  sparql.iri(p) = sparql.iri('"http://dbpedia.org/property/released"^^xsd:string');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(IRI(?p) = <http://dbpedia.org/property/released>)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           |                  iri                   
----------------------------------------+-------------------------------------------------------+----------------------------------------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | <http://dbpedia.org/property/released>
(1 row)

/* isIRI / isURI */
SELECT sparql.isIRI('<https://example/>'); 
 isiri 
-------
 t
(1 row)

SELECT sparql.isIRI('<mailto:foo@example.com>');
 isiri 
-------
 t
(1 row)

SELECT sparql.isIRI('http://example/');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('"http://example/"');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('path');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('"path"');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('"foo"^^xsd:string');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('"foo"^^<http://www.w3.org/2001/XMLSchema#string>'); 
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI(sparql.strdt('foo', 'xsd:string'));
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('"foo"@en');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI('');
 isiri 
-------
 f
(1 row)

SELECT sparql.isIRI(NULL);
 isiri 
-------
 NULL
(1 row)

SELECT sparql.isIRI('<not-an-iri');
 isiri 
-------
 f
(1 row)

SELECT sparql.isURI('<http://example/>');
 isuri 
-------
 t
(1 row)

SELECT sparql.isURI('path');
 isuri 
-------
 f
(1 row)

SELECT p, o, sparql.isIRI(p) FROM ftdbp 
WHERE 
  sparql.iri(p) = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.isIRI(p);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(isIRI(?p))
 FILTER(IRI(?p) = <http://dbpedia.org/property/released>)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | isiri 
----------------------------------------+-------------------------------------------------------+-------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | t
(1 row)

/* STRSTARTS */
SELECT sparql.strstarts('"foobar"','"foo"'), sparql.strstarts('foobar','foo');
 strstarts | strstarts 
-----------+-----------
 t         | t
(1 row)

SELECT sparql.strstarts('"foobar"@en','"foo"@en');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('"foobar"^^<xsd:string>','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('"foobar"^^<xsd:string>','"foo"');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('"foobar"','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('"foobar"@en','"foo"');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('"foobar"@en','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('foobar','');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('','xyz');
 strstarts 
-----------
 f
(1 row)

SELECT sparql.strstarts('foobar',NULL);
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts(NULL,'xyz');
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts(NULL, NULL);
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts(sparql.strlang('foobar','en'),'"foo"@fr');
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts(sparql.strlang('foobar','en'), sparql.strlang('foo','fr'));
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts(sparql.strlang('foobar','en'), '"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts(sparql.strlang('foobar','en'), sparql.strdt('foo','xsd:string'));
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('foobar', sparql.strdt('foo','xsd:string'));
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('foobar','"foo"^^<xsd:string>');
 strstarts 
-----------
 t
(1 row)

SELECT sparql.strstarts('foobar', sparql.strlang('foo','it'));
 strstarts 
-----------
 NULL
(1 row)

SELECT sparql.strstarts('foobar','"foo"@de');
 strstarts 
-----------
 NULL
(1 row)

SELECT p, o, sparql.strstarts(o, sparql.str('Postgre'))
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'pt') AND
  sparql.strstarts(o,'Postgre') AND
  sparql.strstarts(o, '"Postgre"') AND
  sparql.strstarts(o,'"Postgre"^^xsd:string') AND
  sparql.strstarts(o, sparql.strdt('Postgre','xsd:string')) AND
  sparql.strstarts(o, '"Postgre"@pt') AND
  sparql.strstarts(o, sparql.strlang('Postgre','pt'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(STRSTARTS(?o, "Postgre"))
 FILTER(STRSTARTS(?o, "Postgre"))
 FILTER(STRSTARTS(?o, "Postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRSTARTS(?o, "Postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRSTARTS(?o, "Postgre"@pt))
 FILTER(STRSTARTS(?o, "Postgre"@pt))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strstarts 
----------------------------------------------+-----------------+-----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | t
(1 row)

/* STRENDS */
SELECT sparql.strends('"foobar"','"bar"'), sparql.strends('foobar','bar');
 strends | strends 
---------+---------
 t       | t
(1 row)

SELECT sparql.strends('"foobar"@en','"bar"@en');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('"foobar"^^xsd:string', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('"foobar"^^xsd:string', '"bar"');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('"foobar"', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('"foobar"@en', '"bar"');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('"foobar"@en', '"bar"^^xsd:string');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('foobar','xyz');
 strends 
---------
 f
(1 row)

SELECT sparql.strends('foobar','');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('','xyz');
 strends 
---------
 f
(1 row)

SELECT sparql.strends('foobar',NULL);
 strends 
---------
 NULL
(1 row)

SELECT sparql.strends(NULL,'xyz');
 strends 
---------
 NULL
(1 row)

SELECT sparql.strends(NULL, NULL);
 strends 
---------
 NULL
(1 row)

SELECT sparql.strends('"foobar"@en','"bar"@fr');
 strends 
---------
 NULL
(1 row)

SELECT sparql.strends(sparql.strlang('foobar','en'),'"bar"@fr');
 strends 
---------
 NULL
(1 row)

SELECT sparql.strends(sparql.strlang('foobar','en'), '"bar"^^<xsd:string>');
 strends 
---------
 t
(1 row)

SELECT sparql.strends(sparql.strlang('foobar','en'), sparql.strdt('bar','xsd:string'));
 strends 
---------
 t
(1 row)

SELECT sparql.strends('foobar', sparql.strdt('bar','xsd:string'));
 strends 
---------
 t
(1 row)

SELECT sparql.strends('foobar','"bar"^^<xsd:string>');
 strends 
---------
 t
(1 row)

SELECT sparql.strends('foobar','"bar"@de');
 strends 
---------
 NULL
(1 row)

SELECT p, o, sparql.strends(o, sparql.str('SQL'))
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'es') AND
  sparql.strends(o,'SQL') AND
  sparql.strends(o, '"SQL"') AND
  sparql.strends(o,'"SQL"^^xsd:string') AND
  sparql.strends(o, sparql.strdt('SQL','xsd:string'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(STRENDS(?o, "SQL"))
 FILTER(STRENDS(?o, "SQL"))
 FILTER(STRENDS(?o, "SQL"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(STRENDS(?o, "SQL"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strends 
----------------------------------------------+-----------------+---------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | t
(1 row)

/* STRBEFORE */
SELECT sparql.strbefore('abc','b'), sparql.strbefore('"abc"','"b"');
 strbefore | strbefore 
-----------+-----------
 "a"       | "a"
(1 row)

SELECT sparql.strbefore('"abc"@en','bc');
 strbefore 
-----------
 "a"@en
(1 row)

SELECT sparql.strbefore('"abc"@en','"b"@cy');
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore('"abc"^^xsd:string',''), sparql.strbefore('"abc"^^xsd:string','""');
                   strbefore                   |                   strbefore                   
-----------------------------------------------+-----------------------------------------------
 ""^^<http://www.w3.org/2001/XMLSchema#string> | ""^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('abc','xyz'), sparql.strbefore('"abc"','"xyz"');
 strbefore | strbefore 
-----------+-----------
 ""        | ""
(1 row)

SELECT sparql.strbefore('"abc"@en', '"z"@en');
 strbefore 
-----------
 ""
(1 row)

SELECT sparql.strbefore('"abc"@en', '"z"'), sparql.strbefore('"abc"@en', 'z');
 strbefore | strbefore 
-----------+-----------
 ""        | ""
(1 row)

SELECT sparql.strbefore('"abc"@en', '""@en');
 strbefore 
-----------
 ""@en
(1 row)

SELECT sparql.strbefore('"abc"@en', '""');
 strbefore 
-----------
 ""@en
(1 row)

SELECT sparql.strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','c');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"c"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"c"^^xsd:string');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('"abc"^^http://www.w3.org/2001/XMLSchema#string','"c"^^<xsd:string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('"abc"^^xsd:string','"c"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strbefore                    
-------------------------------------------------
 "ab"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strbefore('"abc"@fr','"b"^^xsd:string');
 strbefore 
-----------
 "a"@fr
(1 row)

SELECT sparql.strbefore('"abc"^^<xsd:string>','"b"@de');
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore('"abc"@en','"b"^^<foo:bar>');
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore('abc', NULL);
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore(NULL, 'xyz');
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore(NULL, NULL);
 strbefore 
-----------
 NULL
(1 row)

SELECT sparql.strbefore('abc', '');
 strbefore 
-----------
 ""
(1 row)

SELECT sparql.strbefore('"abc"', '');
 strbefore 
-----------
 ""
(1 row)

SELECT sparql.strbefore('', 'xyz');
 strbefore 
-----------
 ""
(1 row)

SELECT sparql.strbefore('', '');
 strbefore 
-----------
 ""
(1 row)

SELECT sparql.strbefore('""','""');
 strbefore 
-----------
 ""
(1 row)

SELECT p, o, sparql.strbefore(sparql.str(o), 'SQL')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'de') AND
  sparql.strbefore(sparql.str(o), 'SQL') = sparql.str('Postgre');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRBEFORE(STR(?o), "SQL") = "Postgre")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strbefore 
----------------------------------------------+-----------------+-----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "Postgre"
(1 row)

/* STRAFTER */
SELECT sparql.strafter('"abc"','"b"');
 strafter 
----------
 "c"
(1 row)

SELECT sparql.strafter('"abc"@en','ab');
 strafter 
----------
 "c"@en
(1 row)

SELECT sparql.strafter('"abc"@en','"b"@cy');
 strafter 
----------
 NULL
(1 row)

SELECT sparql.strafter('"abc"^^xsd:string','""');
                     strafter                     
--------------------------------------------------
 "abc"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','b');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"b"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"^^<http://www.w3.org/2001/XMLSchema#string>','"b"^^xsd:string');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"^^http://www.w3.org/2001/XMLSchema#string','"b"^^<xsd:string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"^^xsd:string','"b"^^<http://www.w3.org/2001/XMLSchema#string>');
                    strafter                    
------------------------------------------------
 "c"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.strafter('"abc"@fr','"b"^^xsd:string');
 strafter 
----------
 "c"@fr
(1 row)

SELECT sparql.strafter('"abc"','"xyz"');
 strafter 
----------
 ""
(1 row)

SELECT sparql.strafter('"abc"@en', '"z"@en');
 strafter 
----------
 ""
(1 row)

SELECT sparql.strafter('"abc"@en', '"z"');
 strafter 
----------
 ""
(1 row)

SELECT sparql.strafter('"abc"@en', '""@en');
 strafter 
----------
 "abc"@en
(1 row)

SELECT sparql.strafter('"abc"@en', '""');
 strafter 
----------
 "abc"@en
(1 row)

SELECT sparql.strafter('abc','b');
 strafter 
----------
 "c"
(1 row)

SELECT sparql.strafter('abc','xyz');
 strafter 
----------
 ""
(1 row)

SELECT sparql.strafter('abc', NULL);
 strafter 
----------
 NULL
(1 row)

SELECT sparql.strafter(NULL, 'xyz');
 strafter 
----------
 NULL
(1 row)

SELECT sparql.strafter(NULL, NULL);
 strafter 
----------
 NULL
(1 row)

SELECT sparql.strafter('abc', '');
 strafter 
----------
 "abc"
(1 row)

SELECT sparql.strafter('', 'xyz');
 strafter 
----------
 ""
(1 row)

SELECT sparql.strafter('', '');
 strafter 
----------
 ""
(1 row)

SELECT p, o, sparql.strafter(o, sparql.strlang('Postgre','fr')), sparql.strafter(o, sparql.strdt('Postgre','xsd:string'))
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'fr') AND
  sparql.strafter(sparql.str(o), 'Postgre') = sparql.str('SQL');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "fr"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRAFTER(STR(?o), "Postgre") = "SQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strafter | strafter 
----------------------------------------------+-----------------+----------+----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "SQL"@fr | "SQL"@fr
(1 row)

/* CONTAINS */
SELECT sparql.contains('"foobar"', '"bar"'), sparql.contains('foobar', 'bar');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"@en', '"foo"@en'), sparql.contains(sparql.strlang('"foobar"','en'), sparql.strlang('foo','en'));
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"^^xsd:string', '"bar"^^xsd:string'), sparql.contains(sparql.strdt('"foobar"','xsd:string'), sparql.strdt('"bar"','xsd:string'));
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"^^xsd:string', '"foo"'), sparql.contains('"foobar"^^xsd:string', 'foo');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"', '"bar"^^xsd:string'), sparql.contains('foobar', '"bar"^^xsd:string');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"@en', '"foo"'), sparql.contains('"foobar"@en', 'foo');
 contains | contains 
----------+----------
 t        | t
(1 row)

SELECT sparql.contains('"foobar"@en', '"bar"^^xsd:string');
 contains 
----------
 t
(1 row)

SELECT sparql.contains('"foobar"', '""'), sparql.contains('foobar', '');
 contains | contains 
----------+----------
 t        | f
(1 row)

SELECT sparql.contains('""', '"foo"'), sparql.contains('', 'foo');
 contains | contains 
----------+----------
 f        | f
(1 row)

SELECT sparql.contains('"foobar"', NULL), sparql.contains('foobar', NULL);
 contains | contains 
----------+----------
 NULL     | NULL
(1 row)

SELECT sparql.contains(NULL, '"foo"'), sparql.contains(NULL, 'foo');
 contains | contains 
----------+----------
 NULL     | NULL
(1 row)

SELECT sparql.contains(NULL, NULL);
 contains 
----------
 NULL
(1 row)

SELECT sparql.contains('"foobar"@en', '"foo"@fr');
 contains 
----------
 t
(1 row)

SELECT sparql.contains('"123"^^<http://example.com/int>', '"2"');
 contains 
----------
 t
(1 row)

SELECT sparql.contains('"abc"', '"def"@en');
 contains 
----------
 f
(1 row)

SELECT p, o, sparql.contains(o,'"ostg"@fr'), sparql.contains(o,'"ostg"^^xsd:string')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'de') AND
  sparql.contains(o,'ostg') AND
  sparql.contains(o,'"ostg"@de') AND
  sparql.contains(o, sparql.strlang('ostg','de')) AND
  sparql.contains(o, sparql.strdt('ostg','xsd:string'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(CONTAINS(?o, "ostg"))
 FILTER(CONTAINS(?o, "ostg"@de))
 FILTER(CONTAINS(?o, "ostg"@de))
 FILTER(CONTAINS(?o, "ostg"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | contains | contains 
----------------------------------------------+-----------------+----------+----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | t        | t
(1 row)

/* LANGMATCHES */
SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@EN-US'), '"en-us"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@fr'), '"FR"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@fr-ca'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en-us'), '"en-*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"en-*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@fr-ca'), '"fr-*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@fr'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en-us'), '"fr-*"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"en-us-*"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('""@en'), '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('""'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"^^xsd:string'), '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"^^xsd:string'), '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"en"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '"*"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en-us'), '"EN-*"^^xsd:string');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches('', '"en"');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches('en', '"en"');
 langmatches 
-------------
 t
(1 row)

SELECT sparql.langmatches(sparql.lang('"hello"@en'), '');
 langmatches 
-------------
 f
(1 row)

SELECT sparql.langmatches('', '"*"');
 langmatches 
-------------
 t
(1 row)

SELECT p, o, sparql.langmatches(sparql.lang(o),'*')
FROM ftdbp 
WHERE sparql.langmatches(sparql.lang(o),'pt');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
}

INFO:  SPARQL returned 3 records.

                       p                        |                                                                o                                                                 | langmatches 
------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+-------------
 <http://www.w3.org/2000/01/rdf-schema#label>   | "PostgreSQL"@pt                                                                                                                  | t
 <http://www.w3.org/2000/01/rdf-schema#comment> | "PostgreSQL é um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de código aberto."@pt | t
 <http://dbpedia.org/ontology/abstract>         | "PostgreSQL é um sistema gerenciador de banco de dados objeto relacional (SGBD), desenvolvido como projeto de código aberto."@pt | t
(3 rows)

/* ISBLANK */
SELECT sparql.isblank('_:b1');
 isblank 
---------
 t
(1 row)

SELECT sparql.isblank('_:node123');
 isblank 
---------
 t
(1 row)

SELECT sparql.isblank('<http://example.org/a>');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('"hello"');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('"hello"@en');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('"42"^^xsd:integer');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('_notblank');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('b1');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('_:');
 isblank 
---------
 t
(1 row)

SELECT sparql.isblank('_');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank(' ');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank('');
 isblank 
---------
 f
(1 row)

SELECT sparql.isblank(NULL);
 isblank 
---------
 NULL
(1 row)

SELECT p, o, sparql.isblank(o)
FROM ftdbp 
WHERE sparql.isblank(o);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISBLANK(?o))
}

INFO:  SPARQL returned 0 records.

 p | o | isblank 
---+---+---------
(0 rows)

/* ISNUMERIC */
SELECT sparql.isnumeric('12');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:nonNegativeInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"1200"^^xsd:byte');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric('<http://example/>');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:integer');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:positiveInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:negativeInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:nonPositiveInteger');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:long');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:int');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:short');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:unsignedLong');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:unsignedInt');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:unsignedShort');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:unsignedByte');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:double');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:float');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('"12"^^xsd:decimal');
 isnumeric 
-----------
 t
(1 row)

SELECT sparql.isnumeric('');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric(' ');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric('""');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric('" "');
 isnumeric 
-----------
 f
(1 row)

SELECT sparql.isnumeric(NULL);
 isnumeric 
-----------
 NULL
(1 row)

SELECT p, o, sparql.isnumeric(o), sparql.isnumeric(p)
FROM ftdbp
WHERE 
  p = sparql.iri('http://dbpedia.org/ontology/wikiPageLength') AND
  sparql.isnumeric(o);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISNUMERIC(?o))
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageLength>)
}

INFO:  SPARQL returned 1 record.

                      p                       |                               o                                | isnumeric | isnumeric 
----------------------------------------------+----------------------------------------------------------------+-----------+-----------
 <http://dbpedia.org/ontology/wikiPageLength> | "91177"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger> | t         | f
(1 row)

/* ISLITERAL */
SELECT sparql.isliteral('"hello"');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"123"');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"12"^^xsd:integer');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"12"^^xsd:nonNegativeInteger');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"12.34"^^xsd:double');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"true"^^xsd:boolean');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"abc"^^<http://example.org/custom>'); -- true
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"hello"@en');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('"bonjour"@fr');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('12');
 isliteral 
-----------
 f
(1 row)

SELECT sparql.isliteral('<http://example.org>');
 isliteral 
-----------
 f
(1 row)

SELECT sparql.isliteral('_:bnode');
 isliteral 
-----------
 f
(1 row)

SELECT sparql.isliteral('');
 isliteral 
-----------
 f
(1 row)

SELECT sparql.isliteral('" "');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral('""');
 isliteral 
-----------
 t
(1 row)

SELECT sparql.isliteral(NULL);
 isliteral 
-----------
 NULL
(1 row)

SELECT p, o, sparql.isliteral(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.isliteral(o) AND 
  NOT sparql.isliteral(p);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISLITERAL(?o))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 21 records.

                      p                       |           o            | isliteral 
----------------------------------------------+------------------------+-----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "بوستجري إس كيو إل"@ar | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk        | t
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh        | t
(21 rows)

/* BNODE */
SELECT sparql.isblank(sparql.bnode());
 isblank 
---------
 t
(1 row)

SELECT sparql.bnode('xyz');
 bnode 
-------
 _:xyz
(1 row)

SELECT sparql.bnode('xyz');
 bnode 
-------
 _:xyz
(1 row)

SELECT sparql.bnode('"xyz"');
 bnode 
-------
 _:xyz
(1 row)

SELECT sparql.bnode('"xyz"@en');
 bnode 
-------
 _:xyz
(1 row)

SELECT sparql.bnode('"xyz"^^xsd:string');
 bnode 
-------
 _:xyz
(1 row)

SELECT sparql.bnode('hello world');
     bnode     
---------------
 _:hello_world
(1 row)

SELECT sparql.bnode('123!');
 bnode  
--------
 _:123_
(1 row)

SELECT sparql.bnode('<http://example.org>');
 bnode 
-------
 NULL
(1 row)

SELECT sparql.bnode('_:bnode');
 bnode 
-------
 NULL
(1 row)

SELECT sparql.bnode('');
 bnode 
-------
 NULL
(1 row)

SELECT sparql.bnode(NULL);
 bnode 
-------
 NULL
(1 row)

SELECT p, o
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.isblank(sparql.bnode(o));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(ISBLANK(BNODE(?o)))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 21 records.

                      p                       |           o            
----------------------------------------------+------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en
 <http://www.w3.org/2000/01/rdf-schema#label> | "بوستجري إس كيو إل"@ar
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh
(21 rows)

/* UUID (not pushable) */
SELECT sparql.uuid() ~ '^<urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}>$';
 ?column? 
----------
 t
(1 row)

/* STRUUID() (not pushable) */
SELECT sparql.struuid() ~ '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$' AS struuid_format;
 struuid_format 
----------------
 t
(1 row)

/* LCASE */
SELECT sparql.lcase('BAR');
 lcase 
-------
 "bar"
(1 row)

SELECT sparql.lcase('"BAR"');
 lcase 
-------
 "bar"
(1 row)

SELECT sparql.lcase('"BAR"@en'), sparql.lcase(sparql.strlang('BAR','en'));
  lcase   |  lcase   
----------+----------
 "bar"@en | "bar"@en
(1 row)

SELECT sparql.lcase('"BAR"^^xsd:string'), sparql.lcase(sparql.strdt('BAR','xsd:string'));
                      lcase                       |                      lcase                       
--------------------------------------------------+--------------------------------------------------
 "bar"^^<http://www.w3.org/2001/XMLSchema#string> | "bar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.lcase('<http://example.org>');
ERROR:  LCASE does not allow IRIs: <http://example.org>
SELECT sparql.lcase('_:xyz');
ERROR:  LCASE does not allow blank nodes: _:xyz
SELECT sparql.lcase(sparql.bnode('foo'));
ERROR:  LCASE does not allow blank nodes: _:foo
SELECT sparql.lcase('123');
 lcase 
-------
 "123"
(1 row)

SELECT sparql.lcase('"123"');
 lcase 
-------
 "123"
(1 row)

SELECT sparql.lcase('"123"^^xsd:integer');
ERROR:  LCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#integer>
SELECT sparql.lcase('"1990-10-03"^^xsd:date');
ERROR:  LCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#date>
SELECT sparql.lcase('"!§$%&/()?ß}{}[]°^|<>*"');
          lcase          
-------------------------
 "!§$%&/()?ß}{}[]°^|<>*"
(1 row)

SELECT sparql.lcase(NULL);
 lcase 
-------
 NULL
(1 row)

SELECT sparql.lcase('');
 lcase 
-------
 ""
(1 row)

SELECT sparql.lcase('""');
 lcase 
-------
 ""
(1 row)

SELECT sparql.lcase('" "');
 lcase 
-------
 " "
(1 row)

SELECT sparql.lcase(' ');
 lcase 
-------
 " "
(1 row)

SELECT p, o, sparql.lcase(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'de') AND  
  sparql.lcase(o) = sparql.lcase('"PostgreSQL"@de') AND
  sparql.lcase(o) = sparql.lcase(sparql.strlang('PostgreSQL','de'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(LCASE(?o) = "postgresql"@de)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |      lcase      
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "postgresql"@de
(1 row)

SELECT p, o, sparql.lcase(sparql.strdt(o,'xsd:string'))
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND   
  sparql.strstarts(sparql.lcase(sparql.strdt(o,'xsd:string')), sparql.lcase(sparql.strdt('POSTGRE','xsd:string')));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(STRSTARTS(LCASE(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>)), "postgre"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 20 records.

                      p                       |        o        |                          lcase                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh | "postgresql"^^<http://www.w3.org/2001/XMLSchema#string>
(20 rows)

/* UCASE */
SELECT sparql.ucase('bar');
 ucase 
-------
 "BAR"
(1 row)

SELECT sparql.ucase('"bar"');
 ucase 
-------
 "BAR"
(1 row)

SELECT sparql.ucase('"bar"@en'), sparql.ucase(sparql.strlang('bar','en'));
  ucase   |  ucase   
----------+----------
 "BAR"@en | "BAR"@en
(1 row)

SELECT sparql.ucase('"bar"^^xsd:string'), sparql.ucase(sparql.strdt('bar','xsd:string'));
                      ucase                       |                      ucase                       
--------------------------------------------------+--------------------------------------------------
 "BAR"^^<http://www.w3.org/2001/XMLSchema#string> | "BAR"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.ucase('<http://example.org>');
ERROR:  UCASE does not allow IRIs: <http://example.org>
SELECT sparql.ucase('_:xyz');
ERROR:  UCASE does not allow blank nodes: _:xyz
SELECT sparql.ucase(sparql.bnode('foo'));
ERROR:  UCASE does not allow blank nodes: _:foo
SELECT sparql.ucase('123');
 ucase 
-------
 "123"
(1 row)

SELECT sparql.ucase('"123"');
 ucase 
-------
 "123"
(1 row)

SELECT sparql.ucase('"123"^^xsd:integer');
ERROR:  UCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#integer>
SELECT sparql.ucase('"1990-10-03"^^xsd:date');
ERROR:  UCASE does not allow non-string literals: <http://www.w3.org/2001/XMLSchema#date>
SELECT sparql.ucase('"!§$%&/()?ß}{}[]°^|<>*"');
          ucase          
-------------------------
 "!§$%&/()?ß}{}[]°^|<>*"
(1 row)

SELECT sparql.ucase(NULL);
 ucase 
-------
 NULL
(1 row)

SELECT sparql.ucase('');
 ucase 
-------
 ""
(1 row)

SELECT sparql.ucase('""');
 ucase 
-------
 ""
(1 row)

SELECT sparql.ucase('" "');
 ucase 
-------
 " "
(1 row)

SELECT sparql.ucase(' ');
 ucase 
-------
 " "
(1 row)

SELECT p, o, sparql.ucase(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'es') AND
  sparql.ucase(o) = sparql.ucase('"PostgreSQL"@es') AND
  sparql.ucase(o) = sparql.ucase(sparql.strlang('PostgreSQL','es'));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(UCASE(?o) = "POSTGRESQL"@es)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |      ucase      
----------------------------------------------+-----------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "POSTGRESQL"@es
(1 row)

SELECT p, o, sparql.ucase(sparql.strdt(o,'xsd:string'))
FROM ftdbp
WHERE
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.strstarts(sparql.ucase(sparql.strdt(o,'xsd:string')), sparql.ucase(sparql.strdt('postgre','xsd:string')));
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(STRSTARTS(UCASE(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>)), "POSTGRE"^^<http://www.w3.org/2001/XMLSchema#string>))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 20 records.

                      p                       |        o        |                          ucase                          
----------------------------------------------+-----------------+---------------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ca | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@cs | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@el | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eo | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@eu | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@fr | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@in | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@it | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ko | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ja | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@nl | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pl | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@ru | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@sv | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@uk | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@zh | "POSTGRESQL"^^<http://www.w3.org/2001/XMLSchema#string>
(20 rows)

/* STRLEN */
SELECT sparql.strlen('chat'), sparql.strlen('"chat"');
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT sparql.strlen('"chat"@en'), sparql.strlen(sparql.strlang('chat','en'));
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT sparql.strlen('"chat"^^xsd:string'), sparql.strlen(sparql.strdt('chat','xsd:string'));
 strlen | strlen 
--------+--------
      4 |      4
(1 row)

SELECT sparql.strlen('""'), sparql.strlen('');
 strlen | strlen 
--------+--------
      0 |      0
(1 row)

SELECT sparql.strlen('" "'), sparql.strlen(' ');
 strlen | strlen 
--------+--------
      1 |      1
(1 row)

SELECT sparql.strlen('"łø"'), sparql.strlen('łø');
 strlen | strlen 
--------+--------
      2 |      2
(1 row)

SELECT sparql.strlen(NULL);
 strlen 
--------
   NULL
(1 row)

SELECT p, o, sparql.strlen(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'de') AND
  sparql.strlen(o) = sparql.strlen('"PostgreSQL"@de');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "de"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(STRLEN(?o) = 10)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | strlen 
----------------------------------------------+-----------------+--------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@de |     10
(1 row)

/* SUBSTR */
SELECT sparql.substr('"foobar"', 4), sparql.substr('foobar', 4);
 substr | substr 
--------+--------
 "bar"  | "bar"
(1 row)

SELECT sparql.substr('"foobar"@en', 4), sparql.substr(sparql.strlang('foobar','en'), 4);
  substr  |  substr  
----------+----------
 "bar"@en | "bar"@en
(1 row)

SELECT sparql.substr('"foobar"^^xsd:string', 4), sparql.substr(sparql.strdt('foobar','xsd:string'), 4);
                      substr                      |                      substr                      
--------------------------------------------------+--------------------------------------------------
 "bar"^^<http://www.w3.org/2001/XMLSchema#string> | "bar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.substr('"foobar"', 4, 1), sparql.substr('foobar', 4, 1);
 substr | substr 
--------+--------
 "b"    | "b"
(1 row)

SELECT sparql.substr('"foobar"@en', 4, 1), sparql.substr(sparql.strlang('foobar','en'), 4, 1);
 substr | substr 
--------+--------
 "b"@en | "b"@en
(1 row)

SELECT sparql.substr('"foobar"^^xsd:string', 4, 1), sparql.substr(sparql.strdt('foobar','xsd:string'), 4, 1);
                     substr                     |                     substr                     
------------------------------------------------+------------------------------------------------
 "b"^^<http://www.w3.org/2001/XMLSchema#string> | "b"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.substr('""', 42);
 substr 
--------
 ""
(1 row)

SELECT sparql.substr('', 42);
 substr 
--------
 ""
(1 row)

SELECT sparql.substr(NULL, 42);
 substr 
--------
 NULL
(1 row)

SELECT sparql.substr('"foo"', NULL);
 substr 
--------
 NULL
(1 row)

SELECT p, o, sparql.substr(o, 7, 3), sparql.substr(sparql.strdt(o,'xsd:string'), 7, 3) 
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.substr(o, 7, 3) = sparql.substr('"PostgreSQL"@es', 7, 3) AND
  sparql.substr(sparql.strdt(o,'xsd:string'), 7, 3) = sparql.substr(sparql.strdt('PostgreSQL','xsd:string'), 7, 3) AND
  sparql.substr(o, 7) = sparql.substr('"PostgreSQL"@es', 7) AND
  sparql.substr(sparql.strlang(o,'es'), 7, 3) = sparql.substr(sparql.strlang('PostgreSQL','es'), 7, 3) AND
  sparql.langmatches(sparql.lang(o), 'es');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(SUBSTR(?o, 7, 3) = "eSQ"@es)
 FILTER(SUBSTR(STRLANG(?o, "es"), 7, 3) = "eSQ"@es)
 FILTER(SUBSTR(STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>), 7, 3) = "eSQ"^^<http://www.w3.org/2001/XMLSchema#string>)
 FILTER(SUBSTR(?o, 7) = "eSQL"@es)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |  substr  |                      substr                      
----------------------------------------------+-----------------+----------+--------------------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "eSQ"@es | "eSQ"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

/* CONCAT */
SELECT sparql.concat('"foo"', '"bar"'), sparql.concat('foo', 'bar');
  concat  |  concat  
----------+----------
 "foobar" | "foobar"
(1 row)

SELECT sparql.concat('"foo"@en', '"bar"@en'), sparql.concat(sparql.strlang('foo','en'), sparql.strlang('bar','en'));
   concat    |   concat    
-------------+-------------
 "foobar"@en | "foobar"@en
(1 row)

SELECT sparql.concat('"foo"^^xsd:string', '"bar"^^xsd:string'), sparql.concat(sparql.strdt('foo','xsd:string'), sparql.strdt('bar','xsd:string'));
                       concat                        |                       concat                        
-----------------------------------------------------+-----------------------------------------------------
 "foobar"^^<http://www.w3.org/2001/XMLSchema#string> | "foobar"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.concat('"foo"', '"bar"^^xsd:string'), sparql.concat('foo', sparql.strdt('bar','xsd:string'));
  concat  |  concat  
----------+----------
 "foobar" | "foobar"
(1 row)

SELECT sparql.concat('"foo"@en', '"bar"'), sparql.concat(sparql.strlang('foo','en'), 'bar');
  concat  |  concat  
----------+----------
 "foobar" | "foobar"
(1 row)

SELECT sparql.concat('"foo"@en', '"bar"^^xsd:string'), sparql.concat(sparql.strlang('foo','en'), sparql.strdt('bar','xsd:string'));
  concat  |  concat  
----------+----------
 "foobar" | "foobar"
(1 row)

SELECT sparql.concat(NULL, 'bar'), sparql.concat('foo', NULL), sparql.concat(NULL, NULL);
 concat | concat | concat 
--------+--------+--------
 NULL   | NULL   | NULL
(1 row)

SELECT sparql.concat('foo', ''), sparql.concat('', 'bar'), sparql.concat('', ''), sparql.concat('""', '""');
 concat | concat | concat | concat 
--------+--------+--------+--------
 "foo"  | "bar"  | ""     | ""
(1 row)

SELECT sparql.concat('"foo"^^foo:bar', 'bar'), sparql.concat('"foo"', '"bar"^^foo:bar');
ERROR:  CONCAT arguments must be simple literals or 'xsd:string'
SELECT p, o, sparql.concat(o,sparql.strlang(' Global','pt')), sparql.concat(o,sparql.strdt(' Global','xsd:string'))
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'pt') AND
  sparql.concat(o,'') = sparql.str('PostgreSQL');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(CONCAT(?o, "") = "PostgreSQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |         concat         |       concat        
----------------------------------------------+-----------------+------------------------+---------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "PostgreSQL Global"@pt | "PostgreSQL Global"
(1 row)

/* REPLACE */
SELECT sparql.replace('"abcd"', '"b"', '"Z"'), sparql.replace('abcd', 'b', 'Z');
 replace | replace 
---------+---------
 "aZcd"  | "aZcd"
(1 row)

SELECT sparql.replace('"abab"', '"B"', '"Z"','"i"'), sparql.replace('abab', 'B', 'Z','i');
 replace | replace 
---------+---------
 "aZaZ"  | "aZaZ"
(1 row)

SELECT sparql.replace('"abab"', '"B."', '"Z"','"i"'), sparql.replace('abab', 'B.', 'Z','i');
 replace | replace 
---------+---------
 "aZb"   | "aZb"
(1 row)

SELECT sparql.replace('"abcd"@en', '"b"', '"Z"'), sparql.replace(sparql.strlang('abcd','en'), 'b', 'Z');
 replace | replace 
---------+---------
 "aZcd"  | "aZcd"
(1 row)

SELECT sparql.replace('"abab"^^xsd:string', '"B"', '"Z"','"i"'), sparql.replace(sparql.strdt('abab','xsd:string'), 'B', 'Z','i');
 replace | replace 
---------+---------
 "aZaZ"  | "aZaZ"
(1 row)

SELECT sparql.replace('"abcd"', '"b"@en', '"Z"'), sparql.replace('abcd', sparql.strlang('b','en'), 'Z');
 replace | replace 
---------+---------
 "aZcd"  | "aZcd"
(1 row)

SELECT sparql.replace('"abab"', '"B"^^xsd:string', '"Z"','"i"'), sparql.replace('abab', sparql.strdt('B','xsd:string'), 'Z','i');
 replace | replace 
---------+---------
 "aZaZ"  | "aZaZ"
(1 row)

SELECT sparql.replace('""', '"b"', '"Z"'), sparql.replace('', 'b', 'Z');
 replace | replace 
---------+---------
 ""      | ""
(1 row)

SELECT sparql.replace('"abcd"', '""', '"Z"'), sparql.replace('abcd', '', 'Z');
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text) line 4 at RAISE
SELECT sparql.replace('"abcd"', '"b"', '""'), sparql.replace('abcd', 'b', '');
 replace | replace 
---------+---------
 "acd"   | "acd"
(1 row)

SELECT sparql.replace('"ab\"cd"', '"b"', '"Z"'), sparql.replace('ab\"cd', 'b', 'Z');
 replace  | replace  
----------+----------
 "aZ\"cd" | "aZ\"cd"
(1 row)

SELECT sparql.replace(NULL, 'b', 'Z'), sparql.replace('abcd', NULL, 'Z'), sparql.replace('abcd', 'b', NULL), sparql.replace('abcd', 'b', 'Z', NULL);
 replace | replace | replace | replace 
---------+---------+---------+---------
 NULL    | NULL    | NULL    | NULL
(1 row)

SELECT sparql.replace('', 'a', 'Z');                -- Empty input string
 replace 
---------
 ""
(1 row)

SELECT sparql.replace('abcd', '', 'Z');             -- Empty pattern
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text) line 4 at RAISE
SELECT sparql.replace('abcd', 'a', '');             -- Empty replacement
 replace 
---------
 "bcd"
(1 row)

SELECT sparql.replace('', '', 'Z');                 -- Empty pattern and replacement
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text) line 4 at RAISE
SELECT sparql.replace('abcd', 'a', 'Z');            -- Pattern at the beginning
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('abcd', 'd', 'Z');            -- Pattern at the end
 replace 
---------
 "abcZ"
(1 row)

SELECT sparql.replace('abcd', 'bc', 'Z');           -- Pattern in the middle
 replace 
---------
 "aZd"
(1 row)

SELECT sparql.replace('aabbcc', 'b', 'Z');          -- Multiple occurrences of the pattern
 replace  
----------
 "aaZZcc"
(1 row)

SELECT sparql.replace('Abcd', 'a', 'Z');            -- Case mismatch pattern
 replace 
---------
 "Abcd"
(1 row)

SELECT sparql.replace('abcd', 'A', 'Z');            -- Case mismatch pattern (uppercase in input)
 replace 
---------
 "abcd"
(1 row)

SELECT sparql.replace('abcd', 'A', 'Z','i');        -- Case-insensitive replacement
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('"abcd"', '"b"', '"Z"');      -- Special characters inside quotes
 replace 
---------
 "aZcd"
(1 row)

SELECT sparql.replace('ab\cd', 'b\\', 'Z');         -- Escaped backslashes
 replace 
---------
 "ab\cd"
(1 row)

SELECT sparql.replace('ab"cd', '"b"', '"Z"');       -- Quotes in the input
 replace  
----------
 "aZ\"cd"
(1 row)

SELECT sparql.replace('ab"cd', 'b"', 'Z');          -- Quotes in pattern
 replace 
---------
 "aZcd"
(1 row)

SELECT sparql.replace('abcdef', 'bc', 'ZY');        -- Multi-character pattern in the middle
 replace  
----------
 "aZYdef"
(1 row)

SELECT sparql.replace('abc abc', 'abc', 'XYZ');     -- Multiple occurrences of a multi-character pattern
  replace  
-----------
 "XYZ XYZ"
(1 row)

SELECT sparql.replace('abcd', 'a', 'Z');            -- Pattern at the start
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('abcd', 'd', 'Z');            -- Pattern at the end
 replace 
---------
 "abcZ"
(1 row)

SELECT sparql.replace('abcdabcd', 'abcd', 'XYZ');   -- Pattern at the start and repeated
 replace  
----------
 "XYZXYZ"
(1 row)

SELECT sparql.replace(NULL, 'a', 'Z');              -- Input is NULL
 replace 
---------
 NULL
(1 row)

SELECT sparql.replace('abcd', NULL, 'Z');           -- Pattern is NULL
 replace 
---------
 NULL
(1 row)

SELECT sparql.replace('abcd', 'a', NULL);           -- Replacement is NULL
 replace 
---------
 NULL
(1 row)

SELECT sparql.replace(NULL, NULL, NULL);             -- All NULLs
 replace 
---------
 NULL
(1 row)

SELECT sparql.replace('"ab\"cd"', '"b"', '"Z"');    -- Escaped double quotes
 replace  
----------
 "aZ\"cd"
(1 row)

SELECT sparql.replace('"ab\"cd"', 'b', 'Z');         -- Escaped double quotes, no pattern
 replace  
----------
 "aZ\"cd"
(1 row)

SELECT sparql.replace('"abcd"@en', 'a', 'Z');       -- Language-tagged literal
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('"abcd"^^xsd:string', 'a', 'Z'); -- Datatype-literal (xsd:string)
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('"abcd"^^xsd:date', 'a', 'Z'); -- Datatype-literal (xsd:date)
 replace 
---------
 "Zbcd"
(1 row)

SELECT sparql.replace('ababab', 'ab', 'XY', 'g');   -- Global replacement
 replace  
----------
 "XYXYXY"
(1 row)

SELECT sparql.replace('ababab', 'ab', 'XY');         -- Non-global replacement (should only replace first occurrence)
 replace  
----------
 "XYXYXY"
(1 row)

SELECT sparql.replace('abcd', '', 'Z', 'g');         -- Empty pattern with global flag
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text,text) line 4 at RAISE
SELECT sparql.replace('abcd', '', 'Z');              -- Empty pattern without global flag
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text) line 4 at RAISE
SELECT sparql.replace('abcd', 'z', 'Z');             -- No pattern match
 replace 
---------
 "abcd"
(1 row)

SELECT sparql.replace('abcd', 'xy', 'Z');            -- No match for multi-character pattern
 replace 
---------
 "abcd"
(1 row)

SELECT sparql.replace('a' || repeat('b', 1000) || 'c', 'b', 'Z');  -- Long string with repeated pattern
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   replace                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

 "ac"
(1 row)

SELECT sparql.replace('abcd', 'abcd', 'XYZ');       -- Pattern matches the entire string
 replace 
---------
 "XYZ"
(1 row)

SELECT sparql.replace('abcdabcd', 'abcd', 'XYZ');   -- Pattern matches at the start
 replace  
----------
 "XYZXYZ"
(1 row)

SELECT sparql.replace('""', '"b"', '"Z"');           -- Empty literal as input
 replace 
---------
 ""
(1 row)

SELECT sparql.replace('"b"', '""', '"Z"');            -- Empty pattern in replacement
ERROR:  pattern cannot be empty in REPLACE
CONTEXT:  PL/pgSQL function sparql.replace(text,text,text) line 4 at RAISE
SELECT sparql.replace('abcd', 'a.b', 'Z', 'g');      -- Dot in pattern (regex)
 replace 
---------
 "abcd"
(1 row)

SELECT sparql.replace('abcd', '[a-b]', 'Z', 'g');     -- Range in regex pattern
 replace 
---------
 "ZZcd"
(1 row)

SELECT sparql.replace('abcd', '(ab)', 'Z', 'g');      -- Group in regex pattern
 replace 
---------
 "Zcd"
(1 row)

SELECT p, o, sparql.replace(o,'Postgre','My'), sparql.replace(o,'"Postgre"@de','')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'es') AND
  sparql.replace(o,'Postgre','My') = sparql.replace(sparql.strlang('PostgreSQL','es'),'Postgre','My') AND
  sparql.replace(o, 'POSTGRE', 'My','i') = sparql.replace('"PostgreSQL"@es', 'POSTGRE', 'My','i');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(REPLACE(?o, "Postgre", "My") = "MySQL")
 FILTER(REPLACE(?o, "POSTGRE", "My", "i") = "MySQL")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | replace | replace 
----------------------------------------------+-----------------+---------+---------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es | "MySQL" | "SQL"
(1 row)

/* REGEX */
SELECT sparql.regex('"abcd"', '"bc"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('"abcd"', '"xy"');
 regex 
-------
 f
(1 row)

SELECT sparql.regex('"abcd"', '"BC"', '"i"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('"abcd"', '"^bc"');
 regex 
-------
 f
(1 row)

SELECT sparql.regex('"abcd"', '"^ab"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('"abc\ndef"', '"^def$"', '"m"');
ERROR:  Unsupported regex flags: m (only "i" is supported)
CONTEXT:  PL/pgSQL function sparql.regex(text,text,text) line 8 at RAISE
SELECT sparql.regex('"abc\ndef"', '"c.d"', '"s"');
ERROR:  Unsupported regex flags: s (only "i" is supported)
CONTEXT:  PL/pgSQL function sparql.regex(text,text,text) line 8 at RAISE
SELECT sparql.regex('"abcd"@en', '"bc"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('"123"^^xsd:int', '"23"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('""', '"a"');
 regex 
-------
 f
(1 row)

SELECT sparql.regex('""', '"(.*)"');
 regex 
-------
 t
(1 row)

SELECT sparql.regex('"abcd"', '""');
 regex 
-------
 f
(1 row)

SELECT sparql.regex(NULL, '"a"'), sparql.regex('"abcd"', NULL), sparql.regex('"abcd"', '"a"', NULL);
 regex | regex | regex 
-------+-------+-------
 NULL  | NULL  | NULL
(1 row)

SELECT sparql.regex('"abcd"', '"[a"');
ERROR:  invalid regular expression: brackets [] not balanced
CONTEXT:  PL/pgSQL function sparql.regex(text,text) line 6 at RETURN
SELECT p, o
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'es') AND
  sparql.regex(o, sparql.ucase('postgres'), 'i') AND 
  sparql.regex(o, '^pOs','i') ;
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "es"))
 FILTER(REGEX(?o, "POSTGRES", "i"))
 FILTER(REGEX(?o, "^pOs", "i"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        
----------------------------------------------+-----------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@es
(1 row)

/* ABS */
SELECT sparql.abs('"-1"^^xsd:int');
 abs 
-----
   1
(1 row)

SELECT sparql.abs('"-1.42"^^xsd:double');
 abs  
------
 1.42
(1 row)

SELECT sparql.abs(sparql.strdt('-1.42','xsd:double'));
 abs  
------
 1.42
(1 row)

SELECT sparql.abs(sparql.strdt('-1.42238','xsd:double'));
   abs   
---------
 1.42238
(1 row)

SELECT sparql.abs('');
ERROR:  invalid input syntax for type double precision: ""
CONTEXT:  PL/pgSQL function sparql.abs(text) line 3 at RETURN
SELECT sparql.abs(' ');
ERROR:  invalid input syntax for type double precision: " "
CONTEXT:  PL/pgSQL function sparql.abs(text) line 3 at RETURN
SELECT sparql.abs(NULL);
 abs  
------
 NULL
(1 row)

SELECT sparql.abs(CAST(-1.42 AS numeric));
 abs  
------
 1.42
(1 row)

SELECT sparql.abs(CAST(-1.42 AS double precision));
 abs  
------
 1.42
(1 row)

--SELECT sparql.abs(CAST(-1.42 AS real));
SELECT sparql.abs(CAST(-1 AS bigint));
 abs 
-----
   1
(1 row)

SELECT sparql.abs(CAST(-1 AS smallint));
 abs 
-----
   1
(1 row)

SELECT sparql.abs(CAST(-1 AS int));
 abs 
-----
   1
(1 row)

SELECT p, o, sparql.abs(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/ontology/wikiPageID') AND
  sparql.abs(o) = 23824;
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageID>)
 FILTER(ABS(?o) = 23824)
}

INFO:  SPARQL returned 1 record.

                    p                     |                          o                          |  abs  
------------------------------------------+-----------------------------------------------------+-------
 <http://dbpedia.org/ontology/wikiPageID> | "23824"^^<http://www.w3.org/2001/XMLSchema#integer> | 23824
(1 row)

/* ROUND */
SELECT sparql.round('"2.4999"^^xsd:double');
 round 
-------
     2
(1 row)

SELECT sparql.round('"2.5"^^xsd:double');
 round 
-------
     3
(1 row)

SELECT sparql.round('"-2.5"^^xsd:int');
ERROR:  invalid lexical form for xsd:int: "-2.5"
CONTEXT:  PL/pgSQL function sparql.round(text) line 4 at IF
SELECT sparql.round('');
ERROR:  invalid input syntax for type numeric: ""
CONTEXT:  PL/pgSQL function sparql.round(text) line 4 at IF
SELECT sparql.round('""');
ERROR:  invalid input syntax for type numeric: ""
CONTEXT:  PL/pgSQL function sparql.round(text) line 4 at IF
SELECT sparql.round(' ');
ERROR:  invalid input syntax for type numeric: " "
CONTEXT:  PL/pgSQL function sparql.round(text) line 4 at IF
SELECT sparql.round('" "');
ERROR:  invalid input syntax for type numeric: " "
CONTEXT:  PL/pgSQL function sparql.round(text) line 4 at IF
SELECT sparql.round(NULL);
 round 
-------
  NULL
(1 row)

SELECT sparql.round(CAST(2.49999 AS numeric));
 round 
-------
     2
(1 row)

SELECT sparql.round(CAST(2.5 AS double precision));
 round 
-------
     3
(1 row)

--SELECT sparql.round(CAST(-2.5 AS real));
SELECT sparql.round(CAST(42 AS bigint));
 round 
-------
    42
(1 row)

SELECT sparql.round(CAST(42 AS smallint));
 round 
-------
    42
(1 row)

SELECT sparql.round(CAST(42 AS int));
 round 
-------
    42
(1 row)

SELECT p, o, sparql.round(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/ontology/wikiPageID') AND
  sparql.round(o) = sparql.round('"23824"^^xsd:int');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageID>)
 FILTER(ROUND(?o) = 23824)
}

INFO:  SPARQL returned 1 record.

                    p                     |                          o                          | round 
------------------------------------------+-----------------------------------------------------+-------
 <http://dbpedia.org/ontology/wikiPageID> | "23824"^^<http://www.w3.org/2001/XMLSchema#integer> | 23824
(1 row)

/* CEIL */
SELECT sparql.ceil('"10.5"^^xsd:double');
 ceil 
------
   11
(1 row)

SELECT sparql.ceil('"-10.5"^^:xsd:decimal');
 ceil 
------
  -10
(1 row)

SELECT sparql.ceil(NULL);
 ceil 
------
 NULL
(1 row)

SELECT sparql.ceil(CAST(10.5 AS numeric));
 ceil 
------
   11
(1 row)

SELECT sparql.ceil(CAST(-10.5 AS double precision));
 ceil 
------
  -10
(1 row)

SELECT sparql.ceil(CAST(10.5 AS real));
 ceil 
------
   11
(1 row)

SELECT sparql.ceil(CAST(-42 AS bigint));
 ceil 
------
  -42
(1 row)

SELECT sparql.ceil(CAST(42 AS smallint));
 ceil 
------
   42
(1 row)

SELECT sparql.ceil(CAST(-42 AS int));
 ceil 
------
  -42
(1 row)

SELECT p, o, sparql.ceil(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/ontology/wikiPageID') AND
  sparql.ceil(o) = sparql.ceil('"23823.5"^^xsd:int') AND
  sparql.ceil(o) = sparql.ceil(23823.5);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageID>)
 FILTER(CEIL(?o) = 23824)
}

INFO:  SPARQL returned 1 record.

                    p                     |                          o                          | ceil  
------------------------------------------+-----------------------------------------------------+-------
 <http://dbpedia.org/ontology/wikiPageID> | "23824"^^<http://www.w3.org/2001/XMLSchema#integer> | 23824
(1 row)

/* FLOOR */
SELECT sparql.floor('"10.5"^^xsd:double');
 floor 
-------
    10
(1 row)

SELECT sparql.floor('"-10.5"^^xsd:decimal');
 floor 
-------
   -11
(1 row)

SELECT sparql.floor(CAST(10.5 AS numeric));
 floor 
-------
    10
(1 row)

SELECT sparql.floor(CAST(-10.5 AS double precision));
 floor 
-------
   -11
(1 row)

SELECT sparql.floor(CAST(10.5 AS real));
 floor 
-------
    10
(1 row)

SELECT sparql.floor(CAST(-42 AS bigint));
 floor 
-------
   -42
(1 row)

SELECT sparql.floor(CAST(42 AS smallint));
 floor 
-------
    42
(1 row)

SELECT sparql.floor(CAST(-42 AS int));
 floor 
-------
   -42
(1 row)

SELECT p, o, sparql.floor(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/ontology/wikiPageID') AND
  sparql.floor(o) = sparql.floor('"23824.5"^^xsd:int') AND
  sparql.floor(o) = sparql.floor(23824.5);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/ontology/wikiPageID>)
 FILTER(FLOOR(?o) = 23824)
}

INFO:  SPARQL returned 1 record.

                    p                     |                          o                          | floor 
------------------------------------------+-----------------------------------------------------+-------
 <http://dbpedia.org/ontology/wikiPageID> | "23824"^^<http://www.w3.org/2001/XMLSchema#integer> | 23824
(1 row)

/* RAND */
SELECT setseed(0.42);
 setseed 
---------
 
(1 row)

SELECT 
  sparql.lex(sparql.rand())::numeric BETWEEN 0.0 AND 1.0, 
  sparql.datatype(sparql.rand()) = '<http://www.w3.org/2001/XMLSchema#double>';
 ?column? | ?column? 
----------+----------
 t        | t
(1 row)

/* YEAR */
SELECT sparql.year('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
 year 
------
 2011
(1 row)

SELECT sparql.year('"2011-01-10T14:45:13.815-05:00"');
 year 
------
 2011
(1 row)

SELECT sparql.year('2011-01-10T14:45:13.815-05:00');
 year 
------
 2011
(1 row)

SELECT sparql.year('2011-01-10T14:45:13.815-05:00'::date);
 year 
------
 2011
(1 row)

SELECT sparql.year('2011-01-10T14:45:13.815-05:00'::timestamp);
 year 
------
 2011
(1 row)

SELECT p, o, sparql.year(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.year(o) = 1996 AND
  sparql.year(o) = sparql.year('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(YEAR(?o) = 1996)
 FILTER(YEAR("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 1996)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | year 
----------------------------------------+-------------------------------------------------------+------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | 1996
(1 row)

/* MONTH */
SELECT sparql.month('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
 month 
-------
     1
(1 row)

SELECT sparql.month('"2011-01-10T14:45:13.815-05:00"');
 month 
-------
     1
(1 row)

SELECT sparql.month('2011-01-10T14:45:13.815-05:00');
 month 
-------
     1
(1 row)

SELECT sparql.month('2011-01-10T14:45:13.815-05:00'::date);
 month 
-------
     1
(1 row)

SELECT sparql.month('2011-01-10T14:45:13.815-05:00'::timestamp);
 month 
-------
     1
(1 row)

SELECT p, o, sparql.month(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.month(o) = 7 AND
  sparql.month(o) = sparql.month('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(MONTH(?o) = 7)
 FILTER(MONTH("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 7)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | month 
----------------------------------------+-------------------------------------------------------+-------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> |     7
(1 row)

/* DAYS */
SELECT sparql.day('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
 day 
-----
  10
(1 row)

SELECT sparql.day('"2011-01-10T14:45:13.815-05:00"');
 day 
-----
  10
(1 row)

SELECT sparql.day('2011-01-10T14:45:13.815-05:00');
 day 
-----
  10
(1 row)

SELECT sparql.day('2011-01-10T14:45:13.815-05:00'::date);
 day 
-----
  10
(1 row)

SELECT sparql.day('2011-01-10T14:45:13.815-05:00'::timestamp);
 day 
-----
  10
(1 row)

SELECT p, o, sparql.day(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.day(o) = 8 AND
  sparql.day(o) = sparql.day('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(DAY(?o) = 8)
 FILTER(DAY("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 8)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | day 
----------------------------------------+-------------------------------------------------------+-----
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> |   8
(1 row)

/* HOURS */
SELECT sparql.hours('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
 hours 
-------
    14
(1 row)

SELECT sparql.hours('"2011-01-10T14:45:13.815-05:00"');
 hours 
-------
    14
(1 row)

SELECT sparql.hours('2011-01-10T14:45:13.815-05:00');
 hours 
-------
    14
(1 row)

SELECT sparql.hours('2011-01-10T14:45:13.815-05:00'::date);
 hours 
-------
     0
(1 row)

SELECT sparql.hours('2011-01-10T14:45:13.815-05:00'::timestamp);
 hours 
-------
    14
(1 row)

SELECT p, o, sparql.hours(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.hours(o) = 0 AND
  sparql.hours(o) = sparql.hours('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(HOURS(?o) = 0)
 FILTER(HOURS("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 0)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | hours 
----------------------------------------+-------------------------------------------------------+-------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> |     0
(1 row)

/* MINUTES */
SELECT sparql.minutes('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
 minutes 
---------
      45
(1 row)

SELECT sparql.minutes('"2011-01-10T14:45:13.815-05:00"');
 minutes 
---------
      45
(1 row)

SELECT sparql.minutes('2011-01-10T14:45:13.815-05:00');
 minutes 
---------
      45
(1 row)

SELECT sparql.minutes('2011-01-10T14:45:13.815-05:00'::date);
 minutes 
---------
       0
(1 row)

SELECT sparql.minutes('2011-01-10T14:45:13.815-05:00'::timestamp);
 minutes 
---------
      45
(1 row)

SELECT p, o, sparql.minutes(o)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.minutes(o) = 0 AND
  sparql.minutes(o) = sparql.minutes('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(MINUTES(?o) = 0)
 FILTER(MINUTES("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 0)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | minutes 
----------------------------------------+-------------------------------------------------------+---------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> |       0
(1 row)

/* SECONDS */
SELECT pg_catalog.round(sparql.seconds('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime'),3);
 round  
--------
 13.815
(1 row)

SELECT pg_catalog.round(sparql.seconds('"2011-01-10T14:45:13.815-05:00"'),3);
 round  
--------
 13.815
(1 row)

SELECT pg_catalog.round(sparql.seconds('2011-01-10T14:45:13.815-05:00'),3);
 round  
--------
 13.815
(1 row)

SELECT pg_catalog.round(sparql.seconds('2011-01-10T14:45:13.815-05:00'::date),3);
 round 
-------
 0.000
(1 row)

SELECT pg_catalog.round(sparql.seconds('2011-01-10T14:45:13.815-05:00'::timestamp),3);
 round  
--------
 13.815
(1 row)

SELECT p, o, pg_catalog.round(sparql.seconds(o),3)
FROM ftdbp 
WHERE 
  p = sparql.iri('http://dbpedia.org/property/released') AND
  sparql.seconds(o) = 0.0 AND
  sparql.seconds(o) = sparql.seconds('"1996-07-08"^^xsd:date');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(?p = <http://dbpedia.org/property/released>)
 FILTER(SECONDS(?o) = 0.0)
 FILTER(SECONDS("1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date>) = 0.0)
}

INFO:  SPARQL returned 1 record.

                   p                    |                           o                           | round 
----------------------------------------+-------------------------------------------------------+-------
 <http://dbpedia.org/property/released> | "1996-07-08"^^<http://www.w3.org/2001/XMLSchema#date> | 0.000
(1 row)

/* TIMEZONE */
SELECT sparql.timezone('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
                          timezone                           
-------------------------------------------------------------
 "-PT5H"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2011-01-10T14:45:13.815Z"^^xsd:dateTime');
                          timezone                          
------------------------------------------------------------
 "PT0S"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2011-01-10T14:45:13.815"^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): datetime has no timezone: 2011-01-10T14:45:13.815
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 27 at RAISE
SELECT sparql.timezone('"2020-12-01T08:00:00-05:00"^^xsd:dateTime');
                          timezone                           
-------------------------------------------------------------
 "-PT5H"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2020-12-01T08:00:00+02:30"^^xsd:dateTime');
                           timezone                            
---------------------------------------------------------------
 "PT2H30M"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2020-12-01T08:00:00Z"^^xsd:dateTime');
                          timezone                          
------------------------------------------------------------
 "PT0S"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2020-12-01T08:00:00.123+00:00"^^xsd:dateTime');
                          timezone                          
------------------------------------------------------------
 "PT0S"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2020-12-01T08:00:00.123456-04:45"^^xsd:dateTime');
                            timezone                            
----------------------------------------------------------------
 "-PT4H45M"^^<http://www.w3.org/2001/XMLSchema#dayTimeDuration>
(1 row)

SELECT sparql.timezone('"2020-12-01T08:00:00"^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): datetime has no timezone: 2020-12-01T08:00:00
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 27 at RAISE
SELECT sparql.timezone('"2020-12-01T08:00:00+25:00"^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): invalid timezone offset: +25:00
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 41 at RAISE
SELECT sparql.timezone('"2020-12-01T08:00:00-99:99"^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): invalid timezone offset: -99:99
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 41 at RAISE
SELECT sparql.timezone('"invalid-date"^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): invalid xsd:dateTime format: invalid-date
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 20 at RAISE
SELECT sparql.timezone('""^^xsd:dateTime');
ERROR:  SPARQL TIMEZONE(): invalid xsd:dateTime literal
CONTEXT:  PL/pgSQL function sparql.timezone(text) line 15 at RAISE
SELECT sparql.timezone(NULL);
 timezone 
----------
 NULL
(1 row)

SELECT sparql.timezone('"not a date"^^xsd:string');
 timezone 
----------
 NULL
(1 row)

/* TZ */
SELECT sparql.tz('"2011-01-10T14:45:13.815-05:00"^^xsd:dateTime');
   tz   
--------
 -05:00
(1 row)

SELECT sparql.tz('"2011-01-10T14:45:13.815Z"^^xsd:dateTime');
 tz 
----
 Z
(1 row)

SELECT sparql.tz('"2011-01-10T14:45:13.815"^^xsd:dateTime');
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
SELECT sparql.tz('"2020-12-01T08:00:00-05:00"^^xsd:dateTime');
   tz   
--------
 -05:00
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00+02:30"^^xsd:dateTime');
   tz   
--------
 +02:30
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00Z"^^xsd:dateTime');
 tz 
----
 Z
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00.123+00:00"^^xsd:dateTime');
   tz   
--------
 +00:00
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00.123456-04:45"^^xsd:dateTime');
   tz   
--------
 -04:45
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00"^^xsd:dateTime');
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
SELECT sparql.tz('"2020-12-01T08:00:00+25:00"^^xsd:dateTime');
   tz   
--------
 +25:00
(1 row)

SELECT sparql.tz('"2020-12-01T08:00:00-99:99"^^xsd:dateTime');
   tz   
--------
 -99:99
(1 row)

SELECT sparql.tz('"invalid-date"^^xsd:dateTime');
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
SELECT sparql.tz('""^^xsd:dateTime');
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
SELECT sparql.tz(NULL);
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
SELECT sparql.tz('"not a date"^^xsd:string');
ERROR:  SPARQL TZ(): datetime has no timezone
CONTEXT:  PL/pgSQL function sparql.tz(text) line 11 at RAISE
/*BOUND */
SELECT sparql.bound(NULL);
 bound 
-------
 f
(1 row)

SELECT sparql.bound('abc');
 bound 
-------
 t
(1 row)

CREATE FOREIGN TABLE ft (
  s text    OPTIONS (variable '?s', literal_format 'raw'),
  p text    OPTIONS (variable '?p', literal_format 'raw'),
  o text    OPTIONS (variable '?o', literal_format 'raw'),
  x text    OPTIONS (variable '?x', literal_format 'raw')
)
SERVER dbpedia OPTIONS (
  log_sparql 'true',
  sparql 'SELECT * WHERE { ?s ?p ?o OPTIONAL { ?s <http://foo.bar> ?x } }');
SELECT s, p, o, x, sparql.bound(x)
FROM ft
WHERE 
  s = sparql.iri('http://dbpedia.org/resource/PostgreSQL') AND
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'en') AND
  NOT sparql.bound(x) AND
  sparql.bound(s);
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?s ?p ?o ?x 
{ ?s ?p ?o OPTIONAL { ?s <http://foo.bar> ?x } 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "en"))
 FILTER(BOUND(?s))
 FILTER(?s = <http://dbpedia.org/resource/PostgreSQL>)
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                    s                     |                      p                       |        o        |  x   | bound 
------------------------------------------+----------------------------------------------+-----------------+------+-------
 <http://dbpedia.org/resource/PostgreSQL> | <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | NULL | f
(1 row)

/* SAMETERM */
SELECT sparql.sameterm('"abc"', '"abc"');
 sameterm 
----------
 t
(1 row)

SELECT sparql.sameterm('"abc"@en', '"abc"@en');
 sameterm 
----------
 t
(1 row)

SELECT sparql.sameterm('"abc"@en', '"abc"');
 sameterm 
----------
 f
(1 row)

SELECT sparql.sameterm('"abc"^^xsd:string', '"abc"');
 sameterm 
----------
 f
(1 row)

SELECT sparql.sameterm(NULL, '"abc"');
 sameterm 
----------
 NULL
(1 row)

SELECT sparql.sameterm(NULL, NULL);
 sameterm 
----------
 NULL
(1 row)

SELECT p, o, sparql.sameterm(o,'"PostgreSQL"@pt')
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'pt') AND
  sparql.sameterm(o,'"PostgreSQL"@pt');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(SAMETERM(?o, "PostgreSQL"@pt))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        | sameterm 
----------------------------------------------+-----------------+----------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | t
(1 row)

SELECT p, o, sparql.sameterm(o,'"PostgreSQL"@pt')
FROM ftdbp
WHERE 
  sparql.sameterm(p, '<http://www.w3.org/2000/01/rdf-schema#label>');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(SAMETERM(?p, <http://www.w3.org/2000/01/rdf-schema#label>))
}

INFO:  SPARQL returned 0 records.

 p | o | sameterm 
---+---+----------
(0 rows)

/* COALESCE */
SELECT sparql.coalesce(NULL, NULL, 'foo');
 coalesce 
----------
 "foo"
(1 row)

SELECT sparql.coalesce(NULL, NULL, '"foo"');
 coalesce 
----------
 "foo"
(1 row)

SELECT sparql.coalesce(NULL, NULL, '"foo"^^xsd:string');
                     coalesce                     
--------------------------------------------------
 "foo"^^<http://www.w3.org/2001/XMLSchema#string>
(1 row)

SELECT sparql.coalesce(NULL, NULL, '"foo"@fr');
 coalesce 
----------
 "foo"@fr
(1 row)

SELECT sparql.coalesce(NULL, NULL, '<http://example/>');
     coalesce      
-------------------
 <http://example/>
(1 row)

SELECT sparql.coalesce(NULL, NULL, sparql.iri('"http://example/"'));
     coalesce      
-------------------
 <http://example/>
(1 row)

SELECT sparql.coalesce(NULL, NULL, sparql.bnode('foo'));
 coalesce 
----------
 _:foo
(1 row)

SELECT s, p, o, x,sparql.coalesce(x, o)
FROM ft
WHERE 
  s = sparql.iri('http://dbpedia.org/resource/PostgreSQL') AND
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'en') AND
  sparql.coalesce(x, o) = sparql.strlang('PostgreSQL','en') AND
  sparql.coalesce(x, x, x, o) = sparql.strlang('PostgreSQL','en') AND
  sparql.coalesce(x, p) = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.coalesce(x, x, p) = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.coalesce(x, '"PostgreSQL"') = sparql.str('PostgreSQL') AND
  sparql.coalesce(x, sparql.str(o)) = sparql.str('PostgreSQL') AND
  sparql.coalesce(x, sparql.strdt(o,'xsd:string')) = sparql.strdt('PostgreSQL','xsd:string');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?s ?p ?o ?x 
{ ?s ?p ?o OPTIONAL { ?s <http://foo.bar> ?x } 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "en"))
 FILTER(?s = <http://dbpedia.org/resource/PostgreSQL>)
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(COALESCE(?x, ?p) = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(COALESCE(?x, ?x, ?p) = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(COALESCE(?x, ?o) = "PostgreSQL"@en)
 FILTER(COALESCE(?x, ?x, ?x, ?o) = "PostgreSQL"@en)
 FILTER(COALESCE(?x, "PostgreSQL") = "PostgreSQL")
 FILTER(COALESCE(?x, STR(?o)) = "PostgreSQL")
 FILTER(COALESCE(?x, STRDT(?o, <http://www.w3.org/2001/XMLSchema#string>)) = "PostgreSQL"^^<http://www.w3.org/2001/XMLSchema#string>)
}

INFO:  SPARQL returned 1 record.

                    s                     |                      p                       |        o        |  x   |    coalesce     
------------------------------------------+----------------------------------------------+-----------------+------+-----------------
 <http://dbpedia.org/resource/PostgreSQL> | <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@en | NULL | "PostgreSQL"@en
(1 row)

/* MD5 */
SELECT sparql.md5('abc');
                md5                 
------------------------------------
 "900150983cd24fb0d6963f7d28e17f72"
(1 row)

SELECT sparql.md5('"abc"');
                md5                 
------------------------------------
 "900150983cd24fb0d6963f7d28e17f72"
(1 row)

SELECT sparql.md5('"abc"^^xsd:string');
                md5                 
------------------------------------
 "900150983cd24fb0d6963f7d28e17f72"
(1 row)

SELECT sparql.md5('"abc"^^xsd:string') = sparql.md5('abc');
 ?column? 
----------
 t
(1 row)

SELECT sparql.md5('"abc"@en') = sparql.md5('"abc"');
 ?column? 
----------
 t
(1 row)

SELECT sparql.md5('"abc"^^xsd:normalizedString');
                md5                 
------------------------------------
 "900150983cd24fb0d6963f7d28e17f72"
(1 row)

SELECT sparql.md5('"abc"^^xsd:anyURI');
                md5                 
------------------------------------
 "900150983cd24fb0d6963f7d28e17f72"
(1 row)

SELECT sparql.md5('123');  -- xsd:integer
                md5                 
------------------------------------
 "202cb962ac59075b964b07152d234b70"
(1 row)

SELECT sparql.md5('"2020-01-01T00:00:00Z"^^xsd:dateTime');
                md5                 
------------------------------------
 "cbedd1c35c83b21c73dd2416abbe8f0b"
(1 row)

SELECT sparql.md5('"not_a_uri"^^xsd:anyURI');
                md5                 
------------------------------------
 "e45ec53c1ba6595b0685f760b2cf4fc5"
(1 row)

SELECT sparql.md5('""');
                md5                 
------------------------------------
 "d41d8cd98f00b204e9800998ecf8427e"
(1 row)

SELECT sparql.md5(NULL);
 md5  
------
 NULL
(1 row)

SELECT sparql.md5('"Münster"');
                md5                 
------------------------------------
 "9bb43a4ce6b060e4766588c1d88fcb1b"
(1 row)

SELECT sparql.md5(repeat('a', 10000));
                md5                 
------------------------------------
 "0d0c9c4db6953fee9e03f528cafd7d3e"
(1 row)

SELECT p, o, sparql.md5(o)
FROM ftdbp
WHERE 
  p = sparql.iri('http://www.w3.org/2000/01/rdf-schema#label') AND
  sparql.langmatches(sparql.lang(o),'pt') AND
  sparql.md5(o) = sparql.md5('"PostgreSQL"@pt');
INFO:  SPARQL query sent to 'https://dbpedia.org/sparql':


SELECT ?p ?o 
{ <http://dbpedia.org/resource/PostgreSQL> ?p ?o 
 ## rdf_fdw pushdown conditions ##
 FILTER(LANGMATCHES(LANG(?o), "pt"))
 FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>)
 FILTER(MD5(?o) = "399bd1ee587245ecac6f39beaa99886f")
}

INFO:  SPARQL returned 1 record.

                      p                       |        o        |                md5                 
----------------------------------------------+-----------------+------------------------------------
 <http://www.w3.org/2000/01/rdf-schema#label> | "PostgreSQL"@pt | "399bd1ee587245ecac6f39beaa99886f"
(1 row)

DROP SERVER dbpedia CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to foreign table ftdbp
drop cascades to foreign table ft
